{
    "project": {},
    "files": {
        "../Source/Runtime/Input/Key.js": {
            "name": "../Source/Runtime/Input/Key.js",
            "modules": {
                "Input": 1
            },
            "classes": {
                "Key": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Input/Keyboard.js": {
            "name": "../Source/Runtime/Input/Keyboard.js",
            "modules": {},
            "classes": {
                "Keyboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Input/Mouse.js": {
            "name": "../Source/Runtime/Input/Mouse.js",
            "modules": {},
            "classes": {
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Basic/Mesh.js": {
            "name": "../Source/Runtime/Objects/Basic/Mesh.js",
            "modules": {
                "Meshes": 1
            },
            "classes": {
                "Mesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Basic/SkinnedMesh.js": {
            "name": "../Source/Runtime/Objects/Basic/SkinnedMesh.js",
            "modules": {},
            "classes": {
                "SkinnedMesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Basic/Text3D.js": {
            "name": "../Source/Runtime/Objects/Basic/Text3D.js",
            "modules": {},
            "classes": {
                "Text3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js": {
            "name": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "modules": {
                "Cameras": 1
            },
            "classes": {
                "OrthographicCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js": {
            "name": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "modules": {},
            "classes": {
                "PerspectiveCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Device/KinectDevice.js": {
            "name": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "modules": {
                "Devices": 1
            },
            "classes": {
                "KinectDevice": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Device/LeapMotion.js": {
            "name": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "modules": {},
            "classes": {
                "LeapMotion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Lighting/AmbientLight.js": {
            "name": "../Source/Runtime/Objects/Lighting/AmbientLight.js",
            "modules": {
                "Lights": 1
            },
            "classes": {
                "AmbientLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Lighting/DirectionalLight.js": {
            "name": "../Source/Runtime/Objects/Lighting/DirectionalLight.js",
            "modules": {},
            "classes": {
                "DirectionalLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Lighting/HemisphereLight.js": {
            "name": "../Source/Runtime/Objects/Lighting/HemisphereLight.js",
            "modules": {},
            "classes": {
                "HemisphereLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Lighting/PointLight.js": {
            "name": "../Source/Runtime/Objects/Lighting/PointLight.js",
            "modules": {},
            "classes": {
                "PointLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Lighting/RectAreaLight.js": {
            "name": "../Source/Runtime/Objects/Lighting/RectAreaLight.js",
            "modules": {},
            "classes": {
                "RectAreaLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Lighting/Sky.js": {
            "name": "../Source/Runtime/Objects/Lighting/Sky.js",
            "modules": {},
            "classes": {
                "Sky": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Lighting/SpotLight.js": {
            "name": "../Source/Runtime/Objects/Lighting/SpotLight.js",
            "modules": {},
            "classes": {
                "SpotLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Misc/Empty.js": {
            "name": "../Source/Runtime/Objects/Misc/Empty.js",
            "modules": {
                "Misc": 1
            },
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Particle/ParticleEmitter.js": {
            "name": "../Source/Runtime/Objects/Particle/ParticleEmitter.js",
            "modules": {
                "Particles": 1
            },
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Physics/PhysicsObject.js": {
            "name": "../Source/Runtime/Objects/Physics/PhysicsObject.js",
            "modules": {},
            "classes": {
                "PhysicsObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Script/BlockScript.js": {
            "name": "../Source/Runtime/Objects/Script/BlockScript.js",
            "modules": {
                "Script": 1
            },
            "classes": {
                "BlockScript": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Script/Script.js": {
            "name": "../Source/Runtime/Objects/Script/Script.js",
            "modules": {},
            "classes": {
                "Script": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Sound/AudioEmitter.js": {
            "name": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "modules": {
                "Audio": 1
            },
            "classes": {
                "AudioEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Sound/PositionalAudio.js": {
            "name": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "modules": {},
            "classes": {
                "PositionalAudio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Spine/SpineAnimation.js": {
            "name": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "modules": {
                "Animations": 1
            },
            "classes": {
                "SpineAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Spine/SpineTexture.js": {
            "name": "../Source/Runtime/Objects/Spine/SpineTexture.js",
            "modules": {},
            "classes": {
                "SpineTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Sprite/Sprite.js": {
            "name": "../Source/Runtime/Objects/Sprite/Sprite.js",
            "modules": {
                "Sprite": 1
            },
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Program.js": {
            "name": "../Source/Runtime/Objects/Program.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Objects/Scene.js": {
            "name": "../Source/Runtime/Objects/Scene.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Resources/Audio.js": {
            "name": "../Source/Runtime/Resources/Audio.js",
            "modules": {
                "Resources": 1
            },
            "classes": {
                "Audio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Resources/Folder.js": {
            "name": "../Source/Runtime/Resources/Folder.js",
            "modules": {},
            "classes": {
                "Folder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Resources/Font.js": {
            "name": "../Source/Runtime/Resources/Font.js",
            "modules": {},
            "classes": {
                "Font": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Resources/Image.js": {
            "name": "../Source/Runtime/Resources/Image.js",
            "modules": {},
            "classes": {
                "GORLOT.Image": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Resources/Resource.js": {
            "name": "../Source/Runtime/Resources/Resource.js",
            "modules": {},
            "classes": {
                "Resource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Resources/ResourceManager.js": {
            "name": "../Source/Runtime/Resources/ResourceManager.js",
            "modules": {},
            "classes": {
                "ResourceManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Resources/Video.js": {
            "name": "../Source/Runtime/Resources/Video.js",
            "modules": {},
            "classes": {
                "Video": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/THREE/Fog.js": {
            "name": "../Source/Runtime/THREE/Fog.js",
            "modules": {
                "THREE": 1
            },
            "classes": {
                "THREE.Fog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/THREE/Material.js": {
            "name": "../Source/Runtime/THREE/Material.js",
            "modules": {},
            "classes": {
                "Material": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/THREE/MultiMaterial.js": {
            "name": "../Source/Runtime/THREE/MultiMaterial.js",
            "modules": {},
            "classes": {
                "MultiMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/THREE/Object3D.js": {
            "name": "../Source/Runtime/THREE/Object3D.js",
            "modules": {},
            "classes": {
                "THREE.Object3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Texture/CanvasTexture.js": {
            "name": "../Source/Runtime/Texture/CanvasTexture.js",
            "modules": {
                "Textures": 1
            },
            "classes": {
                "CanvasTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Texture/Texture.js": {
            "name": "../Source/Runtime/Texture/Texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Texture/VideoTexture.js": {
            "name": "../Source/Runtime/Texture/VideoTexture.js",
            "modules": {},
            "classes": {
                "VideoTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Texture/WebcamTexture.js": {
            "name": "../Source/Runtime/Texture/WebcamTexture.js",
            "modules": {},
            "classes": {
                "WebcamTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Utils/ArraybufferUtils.js": {
            "name": "../Source/Runtime/Utils/ArraybufferUtils.js",
            "modules": {
                "BinaryData": 1
            },
            "classes": {
                "ArraybufferUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Utils/Base64Utils.js": {
            "name": "../Source/Runtime/Utils/Base64Utils.js",
            "modules": {},
            "classes": {
                "Base64Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Utils/BufferUtils.js": {
            "name": "../Source/Runtime/Utils/BufferUtils.js",
            "modules": {},
            "classes": {
                "BufferUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Utils/Mesh2Shape.js": {
            "name": "../Source/Runtime/Utils/Mesh2Shape.js",
            "modules": {
                "Physics": 1
            },
            "classes": {
                "Mesh2shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Utils/ObjectUtils.js": {
            "name": "../Source/Runtime/Utils/ObjectUtils.js",
            "modules": {},
            "classes": {
                "ObjectUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/FileSystem.js": {
            "name": "../Source/Runtime/FileSystem.js",
            "modules": {},
            "classes": {
                "FileSystem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../Source/Runtime/Gorlot.js": {
            "name": "../Source/Runtime/Gorlot.js",
            "modules": {
                "Runtime": 1
            },
            "classes": {
                "GORLOT": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Input": {
            "name": "Input",
            "submodules": {},
            "elements": {},
            "classes": {
                "Key": 1,
                "Keyboard": 1,
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 3,
            "description": "Key is used by keyboard and mouse to represent a key state"
        },
        "Meshes": {
            "name": "Meshes",
            "submodules": {},
            "elements": {},
            "classes": {
                "Mesh": 1,
                "SkinnedMesh": 1,
                "Text3D": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 3,
            "description": "Meshes are used to combine a geometry and a material, forming a complete renderisable"
        },
        "Cameras": {
            "name": "Cameras",
            "submodules": {},
            "elements": {},
            "classes": {
                "OrthographicCamera": 1,
                "PerspectiveCamera": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 3,
            "description": "Orthographic Camera is used for 2D-like image projection\nBased on THREE.OrthographicCamera, original documentation available at https://threejs.org/docs/#api/en/cameras/OrthographicCamera"
        },
        "Devices": {
            "name": "Devices",
            "submodules": {},
            "elements": {},
            "classes": {
                "KinectDevice": 1,
                "LeapMotion": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 3,
            "description": "Kinect device object\nThis object is used to connect Gorlot to a Microsoft Kinect v1, it only works in Microsoft Windows.\nThe operation of the kinect object depends on a server program used to connect to kinect that sends the data to nunuStudio via WebSocket."
        },
        "Lights": {
            "name": "Lights",
            "submodules": {},
            "elements": {},
            "classes": {
                "AmbientLight": 1,
                "DirectionalLight": 1,
                "HemisphereLight": 1,
                "PointLight": 1,
                "RectAreaLight": 1,
                "Sky": 1,
                "SpotLight": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Lighting/SpotLight.js",
            "line": 3,
            "description": "Same as THREE.AmbientLight\nDocumentation for the object can be found at https://threejs.org/docs/index.html#api/en/lights/AmbientLight"
        },
        "Misc": {
            "name": "Misc",
            "submodules": {},
            "elements": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Misc/Empty.js",
            "line": 3,
            "description": "Creates an empty object"
        },
        "Particles": {
            "name": "Particles",
            "submodules": {},
            "elements": {},
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Particle/ParticleEmitter.js",
            "line": 3,
            "description": "Particle emitter is a wrapper for SPE particle systems"
        },
        "Physics": {
            "name": "Physics",
            "submodules": {},
            "elements": {},
            "classes": {
                "Mesh2shape": 1,
                "PhysicsObject": 1,
                "ObjectUtils": 1,
                "FileSystem": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/FileSystem.js",
            "line": 3,
            "description": "Mesh2shape is used to convert ThreeJS objects to CannonJS shapes\nIt is based on the original Mesh2Shape converted by @donmccurdy"
        },
        "Script": {
            "name": "Script",
            "submodules": {},
            "elements": {},
            "classes": {
                "BlockScript": 1,
                "Script": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 1,
            "description": "BlockScripts are used to code in a graphic way\nThis could be imagined as some kind of ue4 blueprints"
        },
        "Audio": {
            "name": "Audio",
            "submodules": {},
            "elements": {},
            "classes": {
                "AudioEmitter": 1,
                "PositionalAudio": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 3,
            "description": "AudioEmitter is a 3D object used to play audio inside the scene"
        },
        "Animations": {
            "name": "Animations",
            "submodules": {},
            "elements": {},
            "classes": {
                "SpineAnimation": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 3,
            "description": "Spine animation object, to used with animation produced with Esoteric spine"
        },
        "Textures": {
            "name": "Textures",
            "submodules": {},
            "elements": {},
            "classes": {
                "CanvasTexture": 1,
                "SpineTexture": 1,
                "Texture": 1,
                "VideoTexture": 1,
                "WebcamTexture": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Texture/WebcamTexture.js",
            "line": 3,
            "description": "Canvas textures can be used to draw content to the texture using runtime\nCanvas textures always start with black background and a red text \"Canvas Texture\""
        },
        "Sprite": {
            "name": "Sprite",
            "submodules": {},
            "elements": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Sprite/Sprite.js",
            "line": 3,
            "description": "Sprites always face the screen and are mainly used for 2D elements"
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "elements": {},
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 3,
            "description": "Scenes allow you to set up what and where it is supposed to be renderer by three.js This is where you place objects, lights and cameras."
        },
        "Resources": {
            "name": "Resources",
            "submodules": {},
            "elements": {},
            "classes": {
                "Audio": 1,
                "Folder": 1,
                "Font": 1,
                "GORLOT.Image": 1,
                "Resource": 1,
                "ResourceManager": 1,
                "Video": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Resources/Video.js",
            "line": 3,
            "description": "Audio class is used to store audio data as an arraybuffer to be used later by objects with the WebAudio API"
        },
        "THREE": {
            "name": "THREE",
            "submodules": {},
            "elements": {},
            "classes": {
                "THREE.Fog": 1,
                "Material": 1,
                "MultiMaterial": 1,
                "THREE.Object3D": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 3,
            "description": "Fog class is used to store fog attributes attached to a Scene"
        },
        "BinaryData": {
            "name": "BinaryData",
            "submodules": {},
            "elements": {},
            "classes": {
                "ArraybufferUtils": 1,
                "Base64Utils": 1,
                "BufferUtils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Utils/BufferUtils.js",
            "line": 3,
            "description": "ArraybufferUtils contains method to convert from and to ArrayBuffer binary format"
        },
        "Runtime": {
            "name": "Runtime",
            "submodules": {},
            "elements": {},
            "classes": {
                "GORLOT": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "../Source/Runtime/Gorlot.js",
            "line": 3,
            "description": "Class used to store gorlot version and timestamp used for development"
        }
    },
    "classes": {
        "Key": {
            "name": "Key",
            "shortname": "Key",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "file": "../Source/Runtime/Input/Key.js",
            "line": 3,
            "description": "Key is used by keyboard and mouse to represent a key state",
            "is_constructor": 1
        },
        "Keyboard": {
            "name": "Keyboard",
            "shortname": "Keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 3,
            "description": "Keyboard instance for input in sync with the 3D application, it's updated automatically by the runtime handler (Editor/App)",
            "is_constructor": 1
        },
        "Mouse": {
            "name": "Mouse",
            "shortname": "Mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": "",
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 3,
            "description": "Mouse instance for input in sync with the running 3D application, is updated automatically by the runtime handler (Editor/App)",
            "is_constructor": 1
        },
        "Mesh": {
            "name": "Mesh",
            "shortname": "Mesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Basic/Mesh.js",
            "line": 3,
            "description": "Meshes are used to combine a geometry and a material, forming a complete renderisable",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the surface of the geometry",
                    "type": "Material"
                }
            ],
            "is_constructor": 1,
            "extends": "{Mesh}"
        },
        "SkinnedMesh": {
            "name": "SkinnedMesh",
            "shortname": "SkinnedMesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Basic/SkinnedMesh.js",
            "line": 3,
            "description": "A mesh that has a Skeleton with bones that can be used to animate the vertices of the geometry",
            "params": [
                {
                    "name": "geometry",
                    "description": "Geometry used by this mesh",
                    "type": "Geometry"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the surface of the geometry",
                    "type": "Material"
                }
            ],
            "is_constructor": 1,
            "extends": "{SkinnedMesh}"
        },
        "Text3D": {
            "name": "Text3D",
            "shortname": "Text3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Meshes",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 3,
            "description": "Special mesh type used to draw 3D text\nIt receives a Font resource that is used to triangulate and extrude font data into a 3D mesh",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be drawn",
                    "type": "String"
                },
                {
                    "name": "material",
                    "description": "Material used to shade the surface of the geometry",
                    "type": "Material"
                },
                {
                    "name": "font",
                    "description": "Font",
                    "type": "Font"
                },
                {
                    "name": "height",
                    "description": "Text height",
                    "type": "Number"
                },
                {
                    "name": "bevel",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "bevelThickness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "curveSegments",
                    "description": "",
                    "type": "Number"
                }
            ],
            "is_constructor": 1,
            "extends": "{Mesh}"
        },
        "OrthographicCamera": {
            "name": "OrthographicCamera",
            "shortname": "OrthographicCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 3,
            "description": "Orthographic Camera is used for 2D-like image projection\nBased on THREE.OrthographicCamera, original documentation available at https://threejs.org/docs/#api/en/cameras/OrthographicCamera",
            "is_constructor": 1,
            "extends": "{OrthographicCamera}",
            "params": [
                {
                    "name": "size",
                    "description": "Camera size relative to resize mode",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "Aspect ratio X/Y",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "Camera resize mode (RESIZE_HORIZONTAL or RESIZE_VERTICAL)",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "Near projection plane",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "Far projection plane",
                    "type": "Number"
                }
            ]
        },
        "PerspectiveCamera": {
            "name": "PerspectiveCamera",
            "shortname": "PerspectiveCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cameras",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 3,
            "description": "Perspective Camera\nBased on THREE.PerspectiveCamera, original documentation available at https://threejs.org/docs/#api/en/cameras/PerspectiveCamera",
            "extends": "{PerspectiveCamera}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "fov",
                    "description": "Field of View",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "Aspect ratio",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "Near projection plane (how closer can be objects visible by this camera)",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "Far projection plane (how far can be objects visibile by this camera)",
                    "type": "Number"
                }
            ]
        },
        "KinectDevice": {
            "name": "KinectDevice",
            "shortname": "KinectDevice",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Devices",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 3,
            "description": "Kinect device object\nThis object is used to connect Gorlot to a Microsoft Kinect v1, it only works in Microsoft Windows.\nThe operation of the kinect object depends on a server program used to connect to kinect that sends the data to nunuStudio via WebSocket.",
            "extends": "{Object3D}",
            "is_constructor": 1
        },
        "LeapMotion": {
            "name": "LeapMotion",
            "shortname": "LeapMotion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Devices",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 3,
            "description": "Leap device object based on the official LeapJS runtime\nUsed to connect Gorlot to a leap motion hand tracker",
            "is_constructor": 1,
            "extends": "{Object3D}"
        },
        "AmbientLight": {
            "name": "AmbientLight",
            "shortname": "AmbientLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Lighting/AmbientLight.js",
            "line": 3,
            "description": "Same as THREE.AmbientLight\nDocumentation for the object can be found at https://threejs.org/docs/index.html#api/en/lights/AmbientLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light colour in hex RGB",
                    "type": "Number"
                }
            ],
            "extends": "{AmbientLight}",
            "is_constructor": 1
        },
        "DirectionalLight": {
            "name": "DirectionalLight",
            "shortname": "DirectionalLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Lighting/DirectionalLight.js",
            "line": 3,
            "description": "Same as THREE.DirectionalLight\nDocumentation for the object can be found at https://threejs.org/docs/index.html#api/en/lights/DirectionalLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light colour in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{DirectionalLight}",
            "is_constructor": 1
        },
        "HemisphereLight": {
            "name": "HemisphereLight",
            "shortname": "HemisphereLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Lighting/HemisphereLight.js",
            "line": 3,
            "description": "Same as THREE.HemisphereLight\nDocumentation for the object can be found at https://threejs.org/docs/index.html#api/en/lights/HemisphereLight",
            "params": [
                {
                    "name": "skyColor",
                    "description": "Sky light colour in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "groundColor",
                    "description": "Ground light colour in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                }
            ],
            "extends": "{HemisphereLight}",
            "is_constructor": 1
        },
        "PointLight": {
            "name": "PointLight",
            "shortname": "PointLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Lighting/PointLight.js",
            "line": 3,
            "description": "Same as THREE.PointLight\nDocumentation for the object can be found at https://threejs.org/docs/index.html#api/en/lights/PointLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light colour in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "Maximum PointLight range",
                    "type": "Number"
                },
                {
                    "name": "decay",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{PointLight}",
            "is_constructor": 1
        },
        "RectAreaLight": {
            "name": "RectAreaLight",
            "shortname": "RectAreaLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Lighting/RectAreaLight.js",
            "line": 3,
            "description": "Same as THREE.RectAreaLight\nDocumentation for the object can be found at https://threejs.org/docs/index.html#api/en/lights/RectAreaLight",
            "params": [
                {
                    "name": "color",
                    "description": "Light colour in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{RectAreaLight}",
            "is_constructor": 1
        },
        "Sky": {
            "name": "Sky",
            "shortname": "Sky",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 3,
            "description": "Sky class is composed of a Hemisphere Light, Directional Light and a dynamic generated Sky sphere geometry\nThis object is composed by 3 internal hidden children\n - Hemisphere Light\n - Directional Light\n - Mesh",
            "params": [
                {
                    "name": "autoUpdate",
                    "description": "If true, sky auto updates its state",
                    "type": "Boolean"
                },
                {
                    "name": "dayTime",
                    "description": "Day duration (in seconds)",
                    "type": "Number"
                },
                {
                    "name": "sunDistance",
                    "description": "Distance of the sun",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "Starting time",
                    "type": "Number"
                }
            ],
            "extends": "{Object3D}",
            "is_constructor": 1
        },
        "SpotLight": {
            "name": "SpotLight",
            "shortname": "SpotLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Lighting/SpotLight.js",
            "line": 3,
            "description": "Same as THREE.SpotLight\nDocumentation for the object can be found at https://threejs.org/docs/index.html#api/en/lights/SpotLight",
            "params": [
                {
                    "name": "hex",
                    "description": "Light colour in hex RGB",
                    "type": "Number"
                },
                {
                    "name": "intensity",
                    "description": "Light intensity",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "SpotLight maximum range",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "exponent",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "decay",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "{SpotLight}",
            "is_constructor": 1
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Misc",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Misc/Empty.js",
            "line": 3,
            "description": "Creates an empty object",
            "is_constructor": 1,
            "extends": "{Object3D}"
        },
        "ParticleEmitter": {
            "name": "ParticleEmitter",
            "shortname": "ParticleEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Particles",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Particle/ParticleEmitter.js",
            "line": 3,
            "description": "Particle emitter is a wrapper for SPE particle systems",
            "is_constructor": 1,
            "extends": "{Points}"
        },
        "PhysicsObject": {
            "name": "PhysicsObject",
            "shortname": "PhysicsObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Physics/PhysicsObject.js",
            "line": 3,
            "description": "Wrapper for cannon.js Body physics objects",
            "is_constructor": 1,
            "extends": "{Object3D}"
        },
        "BlockScript": {
            "name": "BlockScript",
            "shortname": "BlockScript",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Script/BlockScript.js",
            "line": 1,
            "description": "BlockScripts are used to code in a graphic way\nThis could be imagined as some kind of ue4 blueprints",
            "extends": "{Object3D}",
            "params": [
                {
                    "name": "nodes",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Script": {
            "name": "Script",
            "shortname": "Script",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Script",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 1,
            "description": "Script objects are used to control other objects present in the scene\nIt can access and change every object in the program and supports some events\n - initialize\n     - Called on app initialisation\n - update\n     - Called on every frame (after the frame is rendered)\n - onMouseOver\n     - Called on every frame if mouse is on top of one of the script children\n - onResize\n     - Called every time the window is resize\n - onAppData\n     - Called when receiving data sent by the host website\n\nCode written inside scripts have access to the following attributes\n - scene\n - program\n - self\n     - Same as this reference but global in the script scope\n - Keyboard\n - Mouse",
            "extends": "{Object3D}",
            "params": [
                {
                    "name": "code",
                    "description": "Javascript code to be used by this script",
                    "type": "String"
                }
            ]
        },
        "AudioEmitter": {
            "name": "AudioEmitter",
            "shortname": "AudioEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 3,
            "description": "AudioEmitter is a 3D object used to play audio inside the scene",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio used by this emitter",
                    "type": "Audio"
                }
            ],
            "extends": "{Audio}",
            "is_constructor": 1
        },
        "PositionalAudio": {
            "name": "PositionalAudio",
            "shortname": "PositionalAudio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Audio",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 3,
            "description": "PositionalAudio is used to play a sound with positional audio effect",
            "params": [
                {
                    "name": "audio",
                    "description": "Audio used by this emitter",
                    "type": "Audio"
                }
            ],
            "extends": "{PositionalAudio}",
            "is_constructor": 1
        },
        "SpineAnimation": {
            "name": "SpineAnimation",
            "shortname": "SpineAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animations",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 3,
            "description": "Spine animation object, to used with animation produced with Esoteric spine",
            "is_constructor": 1,
            "extends": "{Mesh}",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "atlas",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "textures",
                    "description": "",
                    "type": "Array"
                }
            ]
        },
        "SpineTexture": {
            "name": "SpineTexture",
            "shortname": "SpineTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Spine/SpineTexture.js",
            "line": 3,
            "description": "Spine animation textures\nBased on SpineTexture from original spine runtime for three.js",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sprite",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Sprite/Sprite.js",
            "line": 3,
            "description": "Sprites always face the screen and are mainly used for 2D elements",
            "params": [
                {
                    "name": "material",
                    "description": "Material used to draw sprites",
                    "type": "Material"
                }
            ],
            "is_constructor": 1,
            "extends": "{Sprite}"
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 3,
            "description": "Scenes allow you to set up what and where it is supposed to be renderer by three.js This is where you place objects, lights and cameras.",
            "is_constructor": 1,
            "extends": "{Scene}"
        },
        "Audio": {
            "name": "Audio",
            "shortname": "Audio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "../Source/Runtime/Resources/Audio.js",
            "line": 3,
            "description": "Audio class is used to store audio data as an arraybuffer to be used later by objects with the WebAudio API",
            "extends": "{Resource}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "URL to Audio file",
                    "type": "String"
                }
            ]
        },
        "Folder": {
            "name": "Folder",
            "shortname": "Folder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "../Source/Runtime/Resources/Folder.js",
            "line": 3,
            "description": "Folder class is used to store and organised some other resources in the editor asset explorer",
            "extends": "{Resource}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the folder",
                    "type": "String"
                }
            ]
        },
        "Font": {
            "name": "Font",
            "shortname": "Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "../Source/Runtime/Resources/Font.js",
            "line": 3,
            "description": "Font class stores font data, font data can be stored as an opentype json or as a TTF file (stored in Base64)\nFont objects are used for both 2D and 3D text",
            "is_constructor": 1,
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to font file",
                    "type": "String"
                }
            ]
        },
        "GORLOT.Image": {
            "name": "GORLOT.Image",
            "shortname": "GORLOT.Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "../Source/Runtime/Resources/Image.js",
            "line": 3,
            "description": "Image class is used to store image data that is used to create Textures\nImages can be stored in several formats but they all are serialised as JPEG if the image is opaque or as PNG if it is transparent\nGIF images are never converted to prevent animation capabilities",
            "is_constructor": 1,
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to image",
                    "type": "String"
                }
            ]
        },
        "Resource": {
            "name": "Resource",
            "shortname": "Resource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "../Source/Runtime/Resources/Resource.js",
            "line": 3,
            "description": "Resource class is used to represent resources\nResources store data that is used by objects",
            "is_constructor": 1
        },
        "ResourceManager": {
            "name": "ResourceManager",
            "shortname": "ResourceManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 3,
            "description": "Resource manager is used to manage available resources used by objects\nThe resource manager is used to extend the Program object, and it's not designed to be used as a standalone\nThe manager is used to manage the following types of resources\n - Images\n - Videos\n - Audio\n - Fonts\n - Textures\n - Materials\n - Geometries",
            "is_constructor": 1
        },
        "Video": {
            "name": "Video",
            "shortname": "Video",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Resources",
            "namespace": "",
            "file": "../Source/Runtime/Resources/Video.js",
            "line": 3,
            "description": "Video resources are used to store video data in Base64",
            "is_constructor": 1,
            "extends": "{Resource}",
            "params": [
                {
                    "name": "url",
                    "description": "URL to video file",
                    "type": "String"
                }
            ]
        },
        "THREE.Fog": {
            "name": "THREE.Fog",
            "shortname": "THREE.Fog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "../Source/Runtime/THREE/Fog.js",
            "line": 3,
            "description": "Fog class is used to store fog attributes attached to a Scene"
        },
        "Material": {
            "name": "Material",
            "shortname": "Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "../Source/Runtime/THREE/Material.js",
            "line": 3,
            "description": "Materials describe the appearance of objects. They are defined in a (mostly) renderer-independent way, so you don't have to rewrite materials if you decide to use a different renderer"
        },
        "MultiMaterial": {
            "name": "MultiMaterial",
            "shortname": "MultiMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "../Source/Runtime/THREE/MultiMaterial.js",
            "line": 3,
            "description": "A material to define multiple material for the same geometry. The geometry decides which material is used for which faces by the faces material index.\nThe material index corresponds with the index of the material in the .materials array"
        },
        "THREE.Object3D": {
            "name": "THREE.Object3D",
            "shortname": "THREE.Object3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "THREE",
            "namespace": "",
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 3,
            "description": "This is the base class for most objects in three.js and provides a set of properties and methods for manipulating objects in 3D space.\nThis page provides documentation for some of the main features of this class, the original documentation can be found at https://threejs.org/docs/index.html#api/en/core/Object3D\nAll Gorlot objects extend the Object3D class of some other higher level class from three.js\nCode examples provided for three.js should also work inside Gorlot",
            "is_constructor": 1
        },
        "CanvasTexture": {
            "name": "CanvasTexture",
            "shortname": "CanvasTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "../Source/Runtime/Texture/CanvasTexture.js",
            "line": 3,
            "description": "Canvas textures can be used to draw content to the texture using runtime\nCanvas textures always start with black background and a red text \"Canvas Texture\"",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "width",
                    "description": "Canvas width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Canvas height",
                    "type": "Number"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "../Source/Runtime/Texture/Texture.js",
            "line": 3,
            "description": "Image texture constructor, supports GIF animations",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "Image"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "magFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "minFilter",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "encoding",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "VideoTexture": {
            "name": "VideoTexture",
            "shortname": "VideoTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 3,
            "description": "Video texture, uses a video DOm element instead of an img element, it's similar to THREE.VideoTexture\nVideoTexture also provides methods for playback control",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "video",
                    "description": "",
                    "type": "Video"
                },
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "WebcamTexture": {
            "name": "WebcamTexture",
            "shortname": "WebcamTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Textures",
            "namespace": "",
            "file": "../Source/Runtime/Texture/WebcamTexture.js",
            "line": 3,
            "description": "Webcam texture is used to capture and display video from a webcam in real-time\nIt uses WebRTC, the most must support it, otherwise WebcamTexture will display a black image",
            "is_constructor": 1,
            "extends": "{Texture}",
            "params": [
                {
                    "name": "mapping",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapS",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wrapT",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anisotropy",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "ArraybufferUtils": {
            "name": "ArraybufferUtils",
            "shortname": "ArraybufferUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryData",
            "namespace": "",
            "file": "../Source/Runtime/Utils/ArraybufferUtils.js",
            "line": 3,
            "description": "ArraybufferUtils contains method to convert from and to ArrayBuffer binary format",
            "static": 1
        },
        "Base64Utils": {
            "name": "Base64Utils",
            "shortname": "Base64Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryData",
            "namespace": "",
            "file": "../Source/Runtime/Utils/Base64Utils.js",
            "line": 3,
            "description": "Base64Utils contains methods to convert from and to Base64 binary format",
            "static": 1
        },
        "BufferUtils": {
            "name": "BufferUtils",
            "shortname": "BufferUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "BinaryData",
            "namespace": "",
            "file": "../Source/Runtime/Utils/BufferUtils.js",
            "line": 3,
            "description": "BufferUtils contains methods to convert from and to NodeJS buffer binary format",
            "static": 1
        },
        "Mesh2shape": {
            "name": "Mesh2shape",
            "shortname": "Mesh2shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 3,
            "description": "Mesh2shape is used to convert ThreeJS objects to CannonJS shapes\nIt is based on the original Mesh2Shape converted by @donmccurdy",
            "author": "Don McCurdy (https://github.com/donmccurdy)",
            "static": 1
        },
        "ObjectUtils": {
            "name": "ObjectUtils",
            "shortname": "ObjectUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 3,
            "description": "ObjectUtils is a collection of methods to apply operations to Object3D objects",
            "static": 1
        },
        "FileSystem": {
            "name": "FileSystem",
            "shortname": "FileSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Physics",
            "namespace": "",
            "file": "../Source/Runtime/FileSystem.js",
            "line": 3,
            "description": "The FileSystem class is used for opening/writing, encoding/decoding and reading files"
        },
        "GORLOT": {
            "name": "GORLOT",
            "shortname": "GORLOT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Runtime",
            "namespace": "",
            "file": "../Source/Runtime/Gorlot.js",
            "line": 3,
            "description": "Class used to store gorlot version and timestamp used for development"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 11,
            "description": "Indicates if this key is currently pressed",
            "itemtype": "property",
            "name": "pressed",
            "default": "false",
            "type": "{Boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 19,
            "description": "Indicates if this key was just pressed",
            "itemtype": "property",
            "name": "justPressed",
            "default": "false",
            "type": "{Boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 27,
            "description": "Indiciates if this key was just released",
            "itemtype": "property",
            "name": "justReleased",
            "default": "false",
            "type": "{Boolean}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 36,
            "description": "Down",
            "itemtype": "attribute",
            "name": "DOWN",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 43,
            "description": "Up",
            "itemtype": "attribute",
            "name": "UP",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 50,
            "description": "Reset",
            "itemtype": "attribute",
            "name": "RESET",
            "type": "{Number}",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 57,
            "description": "Update key status based on new key state",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "Number",
                    "description": "The action to update the key (Keyboard.DOWN, Keyboard.UP, Keyboard.RESET)",
                    "type": "Action"
                }
            ],
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 90,
            "description": "Set this key status manually",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "Boolean",
                    "description": "Was this key just pressed?",
                    "type": "JustPressed"
                },
                {
                    "name": "Boolean",
                    "description": "Is this key being pressed",
                    "type": "Pressed"
                },
                {
                    "name": "Boolean",
                    "description": "Was this key just released?",
                    "type": "JustReleased"
                }
            ],
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Key.js",
            "line": 104,
            "description": "Reset this key to its default values",
            "itemtype": "method",
            "name": "reset",
            "class": "Key",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 10,
            "description": "Array with keyboard keys status",
            "type": "{Array}",
            "itemtype": "property",
            "name": "keys",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 52,
            "description": "Update the key flags synchronously (called automatically by the runtine - Editor/App - )",
            "itemtype": "method",
            "name": "update",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 73,
            "description": "Reset keyboard status to default",
            "itemtype": "method",
            "name": "reset",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 87,
            "description": "Check if a key is pressed",
            "itemtype": "method",
            "name": "keyPressed",
            "params": [
                {
                    "name": "Number",
                    "description": "The key to check if it's pressed",
                    "type": "Key"
                }
            ],
            "return": {
                "description": "True if the entered key is currently pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 97,
            "description": "Check if a key was just pressed",
            "itemtype": "method",
            "name": "keyJustPressed",
            "params": [
                {
                    "name": "Number",
                    "description": "The key to check if was just pressed",
                    "type": "Key"
                }
            ],
            "return": {
                "description": "True if the entered key is currently pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 107,
            "description": "Check if a key was just released",
            "itemtype": "method",
            "name": "keyJustReleased",
            "params": [
                {
                    "name": "Number",
                    "description": "The key to check if was just released",
                    "type": "Key"
                }
            ],
            "return": {
                "description": "True if the entered key is currently pressed",
                "type": "Boolean"
            },
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 117,
            "description": "Dispose keyboard events (called automatically by the runtime - Editor/App - )",
            "itemtype": "method",
            "name": "dispose",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 128,
            "description": "TAB key",
            "itemtype": "attribute",
            "name": "TAB",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 135,
            "description": "ENTER key",
            "itemtype": "attribute",
            "name": "ENTER",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 142,
            "description": "SHIFT key",
            "itemtype": "attribute",
            "name": "SHIFT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 149,
            "description": "CTRL key",
            "itemtype": "attribute",
            "name": "CTRL",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 156,
            "description": "ALT key",
            "itemtype": "attribute",
            "name": "ALT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 163,
            "description": "CAPS_LOCK key",
            "itemtype": "attribute",
            "name": "CAPS_LOCK",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 170,
            "description": "ESC key",
            "itemtype": "attribute",
            "name": "ESC",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 177,
            "description": "SPACEBAR key",
            "itemtype": "attribute",
            "name": "SPACEBAR",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 184,
            "description": "PAGE_UP key",
            "itemtype": "attribute",
            "name": "PAGE_UP",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 191,
            "description": "PAGE_DOWN key",
            "itemtype": "attribute",
            "name": "PAGE_DOWN",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 198,
            "description": "END key",
            "itemtype": "attribute",
            "name": "END",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 205,
            "description": "HOME key",
            "itemtype": "attribute",
            "name": "HOME",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 212,
            "description": "INSERT key",
            "itemtype": "attribute",
            "name": "INSERT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 219,
            "description": "DEL key",
            "itemtype": "attribute",
            "name": "DEL",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 227,
            "description": "LEFT key",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 234,
            "description": "RIGHT key",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 241,
            "description": "UP key",
            "itemtype": "attribute",
            "name": "UP",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 248,
            "description": "DOWN key",
            "itemtype": "attribute",
            "name": "DOWN",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 256,
            "description": "NUM0 key",
            "itemtype": "attribute",
            "name": "NUM0",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 263,
            "description": "NUM1 key",
            "itemtype": "attribute",
            "name": "NUM1",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 270,
            "description": "NUM2 key",
            "itemtype": "attribute",
            "name": "NUM2",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 277,
            "description": "NUM3 key",
            "itemtype": "attribute",
            "name": "NUM3",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 284,
            "description": "NUM4 key",
            "itemtype": "attribute",
            "name": "NUM4",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 291,
            "description": "NUM5 key",
            "itemtype": "attribute",
            "name": "NUM5",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 298,
            "description": "NUM6 key",
            "itemtype": "attribute",
            "name": "NUM6",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 305,
            "description": "NUM7 key",
            "itemtype": "attribute",
            "name": "NUM7",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 312,
            "description": "NUM8 key",
            "itemtype": "attribute",
            "name": "NUM8",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 319,
            "description": "NUM9 key",
            "itemtype": "attribute",
            "name": "NUM9",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 327,
            "description": "A key",
            "itemtype": "attribute",
            "name": "A",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 334,
            "description": "B key",
            "itemtype": "attribute",
            "name": "B",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 341,
            "description": "C key",
            "itemtype": "attribute",
            "name": "C",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 348,
            "description": "D key",
            "itemtype": "attribute",
            "name": "D",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 355,
            "description": "E key",
            "itemtype": "attribute",
            "name": "E",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 362,
            "description": "F key",
            "itemtype": "attribute",
            "name": "F",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 369,
            "description": "G key",
            "itemtype": "attribute",
            "name": "G",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 376,
            "description": "H key",
            "itemtype": "attribute",
            "name": "H",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 383,
            "description": "I key",
            "itemtype": "attribute",
            "name": "I",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 390,
            "description": "J key",
            "itemtype": "attribute",
            "name": "J",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 397,
            "description": "K key",
            "itemtype": "attribute",
            "name": "K",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 404,
            "description": "L key",
            "itemtype": "attribute",
            "name": "L",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 411,
            "description": "M key",
            "itemtype": "attribute",
            "name": "M",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 418,
            "description": "N key",
            "itemtype": "attribute",
            "name": "N",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 425,
            "description": "O key",
            "itemtype": "attribute",
            "name": "O",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 432,
            "description": "P key",
            "itemtype": "attribute",
            "name": "P",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 439,
            "description": "Q key",
            "itemtype": "attribute",
            "name": "Q",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 446,
            "description": "R key",
            "itemtype": "attribute",
            "name": "R",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 453,
            "description": "S key",
            "itemtype": "attribute",
            "name": "S",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 460,
            "description": "T key",
            "itemtype": "attribute",
            "name": "T",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 467,
            "description": "U key",
            "itemtype": "attribute",
            "name": "U",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 474,
            "description": "V key",
            "itemtype": "attribute",
            "name": "V",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 481,
            "description": "W key",
            "itemtype": "attribute",
            "name": "W",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 488,
            "description": "X key",
            "itemtype": "attribute",
            "name": "X",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 495,
            "description": "Y key",
            "itemtype": "attribute",
            "name": "Y",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 502,
            "description": "Z key",
            "itemtype": "attribute",
            "name": "Z",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 511,
            "description": "F1 key",
            "itemtype": "attribute",
            "name": "F1",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 518,
            "description": "F2 key",
            "itemtype": "attribute",
            "name": "F2",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 525,
            "description": "F3 key",
            "itemtype": "attribute",
            "name": "F3",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 532,
            "description": "F4 key",
            "itemtype": "attribute",
            "name": "F4",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 539,
            "description": "F5 key",
            "itemtype": "attribute",
            "name": "F5",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 546,
            "description": "F6 key",
            "itemtype": "attribute",
            "name": "F6",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 553,
            "description": "F7 key",
            "itemtype": "attribute",
            "name": "F7",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 560,
            "description": "F8 key",
            "itemtype": "attribute",
            "name": "F8",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 567,
            "description": "F9 key",
            "itemtype": "attribute",
            "name": "F9",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 574,
            "description": "F10 key",
            "itemtype": "attribute",
            "name": "F10",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 581,
            "description": "F11 key",
            "itemtype": "attribute",
            "name": "F11",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Keyboard.js",
            "line": 588,
            "description": "F12 key",
            "itemtype": "attribute",
            "name": "F12",
            "type": "{Number}",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 20,
            "description": "Array with mouse buttons status",
            "type": "{Array}",
            "itemtype": "property",
            "name": "keys",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 27,
            "description": "Mouse position inside of the window (coordinates in window space)",
            "type": "{Vector2}",
            "itemtype": "property",
            "name": "position",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 34,
            "description": "Mouse movement (coordinates in window space)",
            "type": "{Vector}",
            "itemtype": "property",
            "name": "delta",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 41,
            "description": "Mouse scroll wheel movement",
            "type": "{Number}",
            "itemtype": "property",
            "name": "wheel",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 49,
            "description": "Canvas attached to this mouse instance, used to calculate position and delta in canvas space coordinates",
            "type": "{DOM}",
            "itemtype": "property",
            "name": "canvas",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 177,
            "description": "LEFT mouse button",
            "itemtype": "attribute",
            "name": "LEFT",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 184,
            "description": "MIDDLE mouse button",
            "itemtype": "attribute",
            "name": "MIDDLE",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 191,
            "description": "Right mouse button",
            "itemtype": "attribute",
            "name": "RIGHT",
            "type": "{Number}",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 198,
            "description": "Canvas to be used for coordinates calculation relative to that canvas",
            "itemtype": "method",
            "name": "setCanvas",
            "params": [
                {
                    "name": "canvas",
                    "description": "Canvas to be attached to the Mouse instance",
                    "type": "DOM"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 220,
            "description": "Check if mouse is inside attached canvas (updated async)",
            "itemtype": "method",
            "name": "insideCanvas",
            "return": {
                "description": "Returns true if mouse is currently inside the canvas",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 235,
            "description": "Set mouse lock state",
            "itemtype": "method",
            "name": "setLock",
            "params": [
                {
                    "name": "value",
                    "description": "If true pointer lock will be requested for the canvas attached to the Mouse instance",
                    "type": "Boolean"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 277,
            "description": "Check if mouse button is currently pressed",
            "itemtype": "method",
            "name": "buttonPressed",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns whether the button is being currently pressed or not",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 288,
            "description": "Check if mouse button was double clicked",
            "itemtype": "method",
            "name": "buttonDoubleClicked",
            "return": {
                "description": "Returns true if some mouse button was just double clicked",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 298,
            "description": "Check if mouse button was just pressed",
            "itemtype": "method",
            "name": "buttonJustPressed",
            "return": {
                "description": "Returns whether the button was just pressed or not",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 308,
            "description": "Check if a mouse button was just released",
            "itemtype": "method",
            "name": "buttonJustReleased",
            "params": [
                {
                    "name": "button",
                    "description": "Button to check status of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns whether the button was just released or not",
                "type": "Boolean"
            },
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 319,
            "description": "Update mouse position (automatically called by the runtime handler - Editor / App - )",
            "itemtype": "method",
            "name": "updatePosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "xDiff",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yDiff",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 335,
            "description": "Update a mouse button (automatically called by the runtime)",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "action",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "updateKey",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 349,
            "description": "Update mouse buttons state, position, wheel and delta synchronously (called automatically by the runtime handler - Editor / App - )",
            "itemtype": "method",
            "name": "update",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Input/Mouse.js",
            "line": 410,
            "description": "Dispose mouse events (called automatically by the runtime handler - Editor / App - )",
            "itemtype": "method",
            "name": "dispose",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Mesh.js",
            "line": 13,
            "description": "Geometry defined by the object structure",
            "itemtype": "property",
            "name": "geometry",
            "type": "{Geometry}",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Mesh.js",
            "line": 19,
            "description": "Material is used to define how the geometry surface is shaded",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Mesh.js",
            "line": 25,
            "description": "Determines how the mesh triangles are constructed from the vertices.\nOnly works when the geometry is a BufferGeometry",
            "itemtype": "property",
            "name": "drawMode",
            "default": "TrianglesDrawMode",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Mesh.js",
            "line": 49,
            "description": "Dispose model along with its material and geometry",
            "itemtype": "method",
            "name": "dispose",
            "class": "Mesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/SkinnedMesh.js",
            "line": 13,
            "description": "Geometry defined by the object structure",
            "itemtype": "property",
            "name": "geometry",
            "type": "{Geometry}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/SkinnedMesh.js",
            "line": 19,
            "description": "Material is used to define how the geometry surface is shaded",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/SkinnedMesh.js",
            "line": 25,
            "description": "Determines how the mesh triangles are constructed from the vertices\nOnly works when the geometry is a BufferGeometry",
            "itemtype": "property",
            "name": "drawMode",
            "default": "TrianglesDrawMode",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/SkinnedMesh.js",
            "line": 32,
            "description": "Array with the bones attached to this mesh",
            "itemtype": "property",
            "name": "bones",
            "type": "{Array}",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/SkinnedMesh.js",
            "line": 54,
            "description": "Dispose mesh along with its material and geometry",
            "itemtype": "method",
            "name": "dispose",
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/SkinnedMesh.js",
            "line": 71,
            "description": "Bind a skeleton to the skinned mesh. The bindMatrix gets saved from .bindMatrix property and the .bindMatrixInverse gets calculated.\nThis is called automatically in the constructor, and the skeleton is created from the bones of the Geometry passed in the constructor",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "skeleton",
                    "description": "",
                    "type": "Skeleton"
                },
                {
                    "name": "bindMatrix",
                    "description": "",
                    "type": "Matrix4"
                }
            ],
            "class": "SkinnedMesh",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 20,
            "description": "Material is used to define how the geometry surface is shaded",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 31,
            "description": "Font used to draw text",
            "itemtype": "property",
            "name": "font",
            "type": "{Font}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 38,
            "description": "Text",
            "itemtype": "property",
            "name": "text",
            "type": "{Text}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 45,
            "description": "Size of the text (depth)",
            "itemtype": "property",
            "name": "size",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 52,
            "description": "Height of the text",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 59,
            "description": "Curve segments",
            "itemtype": "property",
            "name": "curveSegments",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 66,
            "description": "Bevel",
            "itemtype": "property",
            "name": "bevel",
            "type": "{Boolean}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 73,
            "description": "Bevel thickness",
            "itemtype": "property",
            "name": "bevelThickness",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 80,
            "description": "Bevel size",
            "itemtype": "property",
            "name": "bevelSize",
            "type": "{Number}",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 102,
            "description": "Set font used by this text 3D instance",
            "params": [
                {
                    "name": "font",
                    "description": "Font",
                    "type": "Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 113,
            "description": "Set text",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setText",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 131,
            "description": "Update text geometry\nShould be called after changing any attribute",
            "itemtype": "method",
            "name": "updateText",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 150,
            "description": "Clone this Text3D instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Clone of this object",
                "type": "Text3D"
            },
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 159,
            "description": "Dispose mesh along with its material and geometry",
            "itemtype": "method",
            "name": "dispose",
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Basic/Text3D.js",
            "line": 180,
            "description": "Create JSON for object\nNeed to backup geometry and set to undefined to avoid it being stored",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Text3D",
            "module": "Meshes"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 22,
            "description": "Camera size (relative to resize mode)",
            "itemtype": "property",
            "name": "size",
            "default": "1.0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 30,
            "description": "Aspect ratio (X/Y)",
            "itemtype": "property",
            "name": "aspect",
            "default": "1.0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 38,
            "description": "Camera resize mode",
            "itemtype": "property",
            "name": "mode",
            "default": "RESIZE_HORIZONTAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 46,
            "description": "Camera viewport offset\nValues range from 0.0 to 1.0 in screen space",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 54,
            "description": "Camera viewport size\nValues range from 0.0 to 1.0 in screen space",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Vector2}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 62,
            "description": "Clear screen colour flag",
            "itemtype": "property",
            "name": "clearColor",
            "default": "false",
            "type": "{Boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 70,
            "description": "Clear depth flag",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{Boolean}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 78,
            "description": "Camera draw order preference\nIf more than one camera has the same order value, the draw order is undefined to those cameras",
            "itemtype": "property",
            "name": "order",
            "default": "0",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 99,
            "description": "Used to set camera to resize horizontally",
            "itemtype": "attribute",
            "name": "RESIZE_HORIZONTAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 106,
            "description": "Used to set camera to resize vertically",
            "itemtype": "attribute",
            "name": "RESIZE_VERTICAL",
            "type": "{Number}",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 113,
            "description": "Destroy camera object and remove it from the scene",
            "itemtype": "method",
            "name": "destroy",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 126,
            "description": "Update camera projection matrix\nShould be called after changing projection parameters",
            "itemtype": "method",
            "name": "updateProjectionMatrix",
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/OrthographicCamera.js",
            "line": 152,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON description",
                "type": "Object"
            },
            "class": "OrthographicCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 16,
            "description": "Camera field of view (in degrees)",
            "itemtype": "property",
            "name": "fov",
            "default": "50",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 23,
            "description": "Camera aspect ratio (X/Y)",
            "itemtype": "property",
            "name": "aspect",
            "default": "1.0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 30,
            "description": "Camera zoom",
            "itemtype": "property",
            "name": "zoom",
            "default": "1.0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 42,
            "description": "Camera viewport offset\nValues range from 0.0 to 1.0 in screen space",
            "itemtype": "property",
            "name": "offset",
            "type": "{Vector2}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 50,
            "description": "Camera viewport size\nValues range from 0.0 to 1.0 in screen space",
            "itemtype": "property",
            "name": "viewport",
            "type": "{Vector2}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 58,
            "description": "Clear screen colour flag",
            "itemtype": "property",
            "name": "clearColor",
            "default": "false",
            "type": "{Boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 66,
            "description": "Clear depth flag",
            "itemtype": "property",
            "name": "clearDepth",
            "default": "false",
            "type": "{Boolean}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 74,
            "description": "Camera draw order preference\nIf more than once camera has the same order value, the draw order is undefined for those cameras",
            "itemtype": "property",
            "name": "order",
            "default": "0",
            "type": "{Number}",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 93,
            "description": "Destroy camera object and remove it from scene",
            "itemtype": "method",
            "name": "destroy",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 106,
            "description": "Update world transformation matrinx ignoring parent scaling properties",
            "itemtype": "method",
            "name": "updateMatrixWorld",
            "params": [
                {
                    "name": "force",
                    "description": "Force matrix update even if the attribute matrixWorldNeedsUpdate is not true",
                    "type": "Boolean"
                }
            ],
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 134,
            "description": "Update camera projection matrix\nShould be called after changing projection parameters",
            "itemtype": "method",
            "name": "updateProjectionMatrix",
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Cinematic/PerspectiveCamera.js",
            "line": 153,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "JSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON description",
                "type": "Object"
            },
            "class": "PerspectiveCamera",
            "module": "Cameras"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 19,
            "description": "Websocket used to connect to the data server",
            "itemtype": "property",
            "name": "socket",
            "default": "127.0.0.1:8181",
            "type": "{Object}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 27,
            "description": "Connected flag",
            "itemtype": "property",
            "name": "connected",
            "type": "{Boolean}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 34,
            "description": "Debug model flag",
            "itemtype": "property",
            "name": "debugModel",
            "default": "true",
            "type": "{Boolean}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 42,
            "description": "Time until data is considered too obsolete to be usable",
            "itemtype": "property",
            "name": "dataTimeout",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 51,
            "description": "Skeleton data sent by the kinect",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 100,
            "description": "Kinect default data timeout in seconds",
            "itemtype": "attribute",
            "name": "DATA_TIMEOUT",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 107,
            "description": "Kinect camera depth mode",
            "itemtype": "attribute",
            "name": "DEPTH",
            "type": "{number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 114,
            "description": "Kinect camera colour mode",
            "itemtype": "attribute",
            "name": "COLOR",
            "type": "{Number}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 121,
            "description": "Kinect skeleton joint names in pairs",
            "itemtype": "attribute",
            "name": "JOINTS_NAME",
            "type": "{Array}",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 133,
            "description": "Update kinect device state",
            "itemtype": "method",
            "name": "update",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 195,
            "description": "Check if there is a kinect connected",
            "itemtype": "method",
            "name": "isConnected",
            "return": {
                "description": "Returns true if there is a kinect connected",
                "type": "Boolean"
            },
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 205,
            "description": "Set kinect camera mode",
            "itemtype": "method",
            "name": "setCameraMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/KinectDevice.js",
            "line": 222,
            "description": "Create JSON for object",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "class": "KinectDevice",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 18,
            "description": "Debug model flag",
            "itemtype": "property",
            "name": "debugModel",
            "default": "true",
            "type": "{Boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 26,
            "description": "Flag to enable gesture detection",
            "itemtype": "property",
            "name": "gesturesEnabled",
            "default": "",
            "type": "{Boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 34,
            "description": "Flag to enable hand pose detection",
            "itemtype": "property",
            "name": "posesEnabled",
            "default": "true",
            "type": "{Boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 42,
            "description": "Hand tracking mode",
            "itemtype": "property",
            "name": "mode",
            "default": "DESK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 50,
            "description": "Flag to set arm tracking",
            "itemtype": "property",
            "name": "useArm",
            "default": "false",
            "type": "{Boolean}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 97,
            "description": "Leap tracking desktop mode",
            "itemtype": "attribute",
            "name": "DESK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 104,
            "description": "Leap tracking HDM mode",
            "itemtype": "attribute",
            "name": "HDM",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 111,
            "description": "Leap SWIP gesture",
            "itemtype": "attribute",
            "name": "SWIPE",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 118,
            "description": "Leap SWIPE_LEFT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_LEFT",
            "type": "{number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 125,
            "description": "Leap SWIPE_RIGHT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_RIGHT",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 132,
            "description": "Leap SWIPE_FRONT gesture",
            "itemtype": "attribute",
            "name": "SWIPE_FRONT",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 139,
            "description": "Leap SWIPE_BACK gesture",
            "itemtype": "attribute",
            "name": "SWIPE_BACK",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 146,
            "description": "Leap SWIPE_UP gesture",
            "itemtype": "attribute",
            "name": "SWIPE_UP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 153,
            "description": "Leap SWIPE_DOWN gesture",
            "itemtype": "attribute",
            "name": "SWIPE_DOWN",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 160,
            "description": "Leap CIRCLE gesture",
            "itemtype": "attribute",
            "name": "CIRCLE",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 167,
            "description": "Leap SCREEN_TAP gesture",
            "itemtype": "attribute",
            "name": "SCREEN_TAP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 174,
            "description": "Leap KEY_TAP",
            "itemtype": "attribute",
            "name": "KEY_TAP",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 181,
            "description": "Hand CLOSED pose",
            "itemtype": "attribute",
            "name": "CLOSED",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 188,
            "description": "Hand OPEN pose",
            "itemtype": "attribute",
            "name": "OPEN",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 195,
            "description": "Hand POINTING pose",
            "itemtype": "attribute",
            "name": "POINTING",
            "type": "{Number}",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 202,
            "description": "Initialise the LeapMotion object\nCalled automatically the runtime handler (Editor / App)\nConnects to the websocket provided by the leap driver",
            "itemtype": "method",
            "name": "initialize",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 226,
            "description": "Update leap status\nCalled automatically by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "update",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 256,
            "description": "Check if a gesture is occuring, is true while the gesture is occuring",
            "itemtype": "method",
            "name": "checkGesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "Gesture to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true if the gesture is occuring",
                "type": "Boolean"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 271,
            "description": "Check if hand is in pose",
            "itemtype": "method",
            "name": "checkPose",
            "params": [
                {
                    "name": "pose",
                    "description": "Pose to be checked",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true if hand is in this pose",
                "type": "Boolean"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 286,
            "description": "Set hand tracking mode\nCan be set to HDM or Desktop Mode",
            "params": [
                {
                    "name": "mode",
                    "description": "Mode",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setMode",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 297,
            "description": "Update leap object pose flags from collected data\nCalled automatically by the update methods",
            "itemtype": "method",
            "name": "updatePoses",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 371,
            "description": "Update leap object gesture flags from collected data\nCalled automatically by the update method",
            "itemtype": "method",
            "name": "updateGestures",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 442,
            "description": "Update internal hand debug model\nAutomatically called by the update method if debugModel is set to true",
            "itemtype": "method",
            "name": "updateDebugModel",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 503,
            "description": "Update physics object to enable hand physics collision\nCalled by updateDebugModel automatically",
            "itemtype": "method",
            "name": "updatePhysics",
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 566,
            "description": "Get hand speed (temporarily normalised)",
            "itemtype": "method",
            "name": "getMovement",
            "return": {
                "description": "Hand speed",
                "type": "Number"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Device/LeapMotion.js",
            "line": 582,
            "description": "Create JSON for object",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON description",
                "type": "Object"
            },
            "class": "LeapMotion",
            "module": "Devices"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/DirectionalLight.js",
            "line": 34,
            "description": "Update light shadow map attributes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "DirectionalLight",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/PointLight.js",
            "line": 37,
            "description": "Update light shadow map attributes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "PointLight",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/RectAreaLight.js",
            "line": 30,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON description",
                "type": "Object"
            },
            "class": "RectAreaLight",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 26,
            "description": "Clock used to control day time",
            "itemtype": "property",
            "name": "clock",
            "type": "{Clock}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 33,
            "description": "Array with top sky colours",
            "itemtype": "property",
            "name": "colorTop",
            "type": "{Array}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 40,
            "description": "Array with bottom sky colours",
            "itemtype": "property",
            "name": "colorBottom",
            "type": "{Array}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 47,
            "description": "Sun colour in hex RGB",
            "itemtype": "property",
            "name": "sunColor",
            "type": "{Number}",
            "default": "{0xFFFFAA}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 55,
            "description": "Moon colour in hex RGB",
            "itemtype": "property",
            "name": "moonColor",
            "type": "{Number}",
            "default": "0x5555bb",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 63,
            "description": "Hemisphere light used to match ambient light with sky colour",
            "itemtype": "property",
            "name": "hemisphere",
            "type": "{HemisphereLight}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 76,
            "description": "Directional light to simulate light and cast shadows",
            "itemtype": "property",
            "name": "sun",
            "type": "{DirectionalLight}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 121,
            "description": "Sky mesh with material shader to calculate dinamically sky colour",
            "itemtype": "property",
            "name": "sky",
            "type": "{Mesh}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 137,
            "description": "If set to true, the sky auto updates its time",
            "itemtype": "property",
            "name": "autoUpdate",
            "default": "true",
            "type": "{Boolean}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 145,
            "description": "Sun distance",
            "itemtype": "property",
            "name": "sunDistance",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 152,
            "description": "Day time (in seconds)",
            "itemtype": "property",
            "name": "dayTime",
            "type": "{number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 159,
            "description": "Current day time (in seconds)",
            "itemtype": "property",
            "name": "time",
            "type": "{Number}",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 178,
            "description": "Initialize sky object\nCalled automatically by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "initialize",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 193,
            "description": "Update sky state\nCalled automatically by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "update",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 221,
            "description": "Update sky state\nCalled automatically by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "updateSky",
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/Sky.js",
            "line": 355,
            "description": "Create JSON for object",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Sky",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Lighting/SpotLight.js",
            "line": 41,
            "description": "Update light shadow map attributes at runtime",
            "itemtype": "method",
            "name": "updateShadowMap",
            "class": "SpotLight",
            "module": "Lights"
        },
        {
            "file": "../Source/Runtime/Objects/Particle/ParticleEmitter.js",
            "line": 110,
            "description": "Initialise particle emitter state\nAutomatically called by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "initialize",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "../Source/Runtime/Objects/Particle/ParticleEmitter.js",
            "line": 125,
            "description": "Update particle emitter state\nCalled automatically by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "update",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "../Source/Runtime/Objects/Particle/ParticleEmitter.js",
            "line": 140,
            "description": "Updates the particle nodes",
            "params": [
                {
                    "name": "nodes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "updateNodes",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "../Source/Runtime/Objects/Particle/ParticleEmitter.js",
            "line": 150,
            "description": "Dispose particle emitter",
            "itemtype": "method",
            "name": "dispose",
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "../Source/Runtime/Objects/Particle/ParticleEmitter.js",
            "line": 173,
            "description": "Create JSON for object\nNeed to backup material and geometry and set to undefined to avoid it to being stored",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "ParticleEmitter",
            "module": "Particles"
        },
        {
            "file": "../Source/Runtime/Objects/Physics/PhysicsObject.js",
            "line": 17,
            "description": "CANNON.JS Body object",
            "itemtype": "attribute",
            "name": "body",
            "type": "{CANNON.Body}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Objects/Physics/PhysicsObject.js",
            "line": 26,
            "description": "CANNON.JS World",
            "itemtype": "attribute",
            "name": "world",
            "type": "{CANNON.World}",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Objects/Physics/PhysicsObject.js",
            "line": 43,
            "description": "Initialise physics object and add it to the scene physics world\nAutomatically called by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "initialize",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Objects/Physics/PhysicsObject.js",
            "line": 68,
            "description": "Update object position and rotation based on cannon.js body\nAutomatically called by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "update",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Objects/Physics/PhysicsObject.js",
            "line": 86,
            "description": "Add shape to physics object body",
            "params": [
                {
                    "name": "shape",
                    "description": "",
                    "type": "CANNON.Shape"
                }
            ],
            "itemtype": "method",
            "name": "addShape",
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Objects/Physics/PhysicsObject.js",
            "line": 97,
            "description": "Create JSON for object\nNeed to backup material and geometry and set to undefined in order to avoid it being store",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "PhysicsObject",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Objects/Script/BlockScript.js",
            "line": 20,
            "description": "The current nodes of this block class",
            "itemtype": "property",
            "name": "nodes",
            "type": "{Object}",
            "class": "BlockScript",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/BlockScript.js",
            "line": 88,
            "description": "The nodes graph (used for serialising and running the nodes)",
            "itemtype": "property",
            "name": "graph",
            "type": "{LGraph}",
            "class": "BlockScript",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/BlockScript.js",
            "line": 103,
            "description": "Initialise this class and triggers every node in the graph that supports onStart",
            "itemtype": "method",
            "name": "initialize",
            "class": "BlockScript",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/BlockScript.js",
            "line": 141,
            "description": "Disposes the object and stops the execution of the graph",
            "itemtype": "method",
            "name": "dispose",
            "class": "BlockScript",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/BlockScript.js",
            "line": 167,
            "description": "Update the current nodes",
            "params": [
                {
                    "name": "nodes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "updateNodes",
            "class": "BlockScript",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/BlockScript.js",
            "line": 177,
            "description": "Create JSON for the blocks",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "BlockScript",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 35,
            "description": "Pointer to parent program\nUsed access program resources easier",
            "itemtype": "property",
            "name": "program",
            "type": "{Program}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 43,
            "description": "Pointer to the parent scene",
            "itemtype": "property",
            "name": "scene",
            "type": "{Scene}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 50,
            "description": "Compiled function using during runtime",
            "itemtype": "property",
            "name": "func",
            "type": "{Function}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 57,
            "description": "Javascript code attached to the script",
            "itemtype": "property",
            "name": "code",
            "type": "{String}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 73,
            "description": "Default script code used when creating a new Script",
            "itemtype": "attribute",
            "name": "default",
            "type": "{String}",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 80,
            "description": "Initialise script\nAutomatically called by the runtime handler (Editor / App)\nCalls the script initialise method - if it exists -",
            "itemtype": "method",
            "name": "initialize",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 118,
            "description": "Update script state\nCalls the script update method - if it exists -",
            "itemtype": "method",
            "name": "update",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 142,
            "description": "Call resize method - if available -",
            "itemtype": "method",
            "name": "resize",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 152,
            "description": "Call onAppData - if available -",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Any"
                }
            ],
            "itemtype": "method",
            "name": "appData",
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 163,
            "description": "Set script code",
            "itemtype": "method",
            "name": "setCode",
            "params": [
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Script/Script.js",
            "line": 187,
            "description": "Create JSON for script",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Script",
            "module": "Script"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 23,
            "description": "Audio volume",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 31,
            "description": "If true, the playback will start automatically",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{Boolean}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 39,
            "description": "Playback speed",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 47,
            "description": "Start time (in seconds)",
            "itemtype": "property",
            "name": "startTime",
            "default": "0.0",
            "type": "{Number}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 55,
            "description": "If true, the audio will play in loop",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{Boolean}",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 79,
            "description": "Initialise the audio object (automatically called by the runtime handler - Editor / App -)",
            "itemtype": "method",
            "name": "initialize",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 102,
            "description": "Dispose audio object",
            "itemtype": "method",
            "name": "dispose",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 121,
            "description": "Change audio emitter volume",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "Audio volume",
                    "type": "Number"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 133,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON description",
                "type": "Object"
            },
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 157,
            "description": "Starts playback",
            "itemtype": "method",
            "name": "play",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 162,
            "description": "Pauses playback",
            "itemtype": "method",
            "name": "pause",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 167,
            "description": "Stops playback and resets time to 0",
            "itemtype": "method",
            "name": "stop",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 172,
            "description": "Set loop mode",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setLoop",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 178,
            "description": "Sets playback speed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setPlaybackRate",
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 184,
            "description": "Add the filter to the filters array",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/AudioEmitter.js",
            "line": 190,
            "description": "Set the filters array to value",
            "itemtype": "method",
            "name": "setFilters",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "AudioEmitter",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 19,
            "description": "Audio volume",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{Number}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 27,
            "description": "If true, the playback starts automatically",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{Boolean}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 35,
            "description": "Playback speed",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{Number}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 43,
            "description": "Start time (in seconds)",
            "itemtype": "property",
            "name": "startTime",
            "default": "0.0",
            "type": "{Number}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 51,
            "description": "If true, the audio plays in loop",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{Boolean}",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 77,
            "description": "Initialise audio object (automatically called by runtime handler - Editor / App - )",
            "itemtype": "method",
            "name": "initialize",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 106,
            "description": "Update positional audio state",
            "itemtype": "method",
            "name": "update",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 126,
            "description": "Dispose audio object",
            "itemtype": "method",
            "name": "dispose",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 141,
            "description": "Sets the audio emitter volume",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "Audio volume",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Self pointer for chaining",
                "type": "PositionalAudio"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 159,
            "description": "Create JSON description",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON description",
                "type": "Object"
            },
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 181,
            "description": "Starts playback",
            "itemtype": "method",
            "name": "play",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 186,
            "description": "Pauses playback",
            "itemtype": "method",
            "name": "pause",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 191,
            "description": "Stops playback and resets time to 0",
            "itemtype": "method",
            "name": "stop",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 196,
            "description": "Set loop mode",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setLoop",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 202,
            "description": "Set playback speed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setPlaybackRate",
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 208,
            "description": "Add the filter to the filters array",
            "itemtype": "method",
            "name": "setFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Sound/PositionalAudio.js",
            "line": 214,
            "description": "Sets the filters array to value",
            "itemtype": "method",
            "name": "setFilters",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "PositionalAudio",
            "module": "Audio"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 16,
            "description": "Array of SpineTextures used by the animation",
            "itemtype": "property",
            "name": "textures",
            "type": "{Array}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 70,
            "description": "Animation data",
            "itemtype": "property",
            "name": "json",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 77,
            "description": "Texture atlas information",
            "itemtype": "property",
            "name": "atlas",
            "type": "{Object}",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 106,
            "description": "Update animation state\nAutomatically called by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "update",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 124,
            "description": "Get all available animations",
            "itemtype": "method",
            "name": "getAnimations",
            "return": {
                "description": "Animations",
                "type": "Array"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 133,
            "description": "Set animation from track number and name",
            "itemtype": "method",
            "name": "setAnimation",
            "params": [
                {
                    "name": "track",
                    "description": "Track number",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "Animation name",
                    "type": "String"
                }
            ],
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 145,
            "description": "Get skins in this animation",
            "itemtype": "method",
            "name": "getSkins",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 154,
            "description": "Update mesh geometry from animation state",
            "itemtype": "method",
            "name": "updateGeometry",
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Spine/SpineAnimation.js",
            "line": 207,
            "description": "Serialise animation data",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "SpineAnimation",
            "module": "Animations"
        },
        {
            "file": "../Source/Runtime/Objects/Sprite/Sprite.js",
            "line": 12,
            "description": "Material used to render the sprite",
            "itemtype": "property",
            "name": "material",
            "type": "{Material}",
            "class": "Sprite",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 22,
            "description": "GorlotApp instance, used to communication between an app and the host webpage",
            "itemtype": "property",
            "name": "app",
            "default": "null",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 32,
            "description": "Program description",
            "itemtype": "property",
            "name": "description",
            "type": "{String}",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 39,
            "description": "Program author",
            "itemtype": "property",
            "name": "author",
            "type": "{String}",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 46,
            "description": "Program version",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "default": "\"0\"",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 54,
            "description": "Flag to control pointer locking",
            "itemtype": "property",
            "name": "lockPointer",
            "type": "{Boolean}",
            "default": "false",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 63,
            "description": "Enable virtual reality flag",
            "itemtype": "property",
            "name": "vr",
            "default": "false",
            "type": "{Boolean}",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 71,
            "description": "Virtual reality movement scale",
            "itemtype": "property",
            "name": "vrScale",
            "default": "1.0",
            "type": "{Number}",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 80,
            "description": "If true, the program is rendered with antialiasing",
            "itemtype": "property",
            "name": "antialiasing",
            "type": "{Boolean}",
            "default": "false",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 88,
            "description": "If true, the program is rendered with shadows",
            "itemtype": "property",
            "name": "shadows",
            "type": "{Boolean}",
            "default": "true",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 96,
            "description": "Shadow type",
            "itemtype": "property",
            "name": "shadowsType",
            "type": "{Number}",
            "default": "PCFSoftShadowMap",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 145,
            "description": "Select initial scene and initialise that scene\nAutOmatically called by the runtime handler ( Editor / App )",
            "itemtype": "method",
            "name": "initialize",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 172,
            "description": "Set program mouse and keyboard",
            "itemtype": "method",
            "name": "setMouseKeyboard",
            "params": [
                {
                    "name": "mouse",
                    "description": "",
                    "type": "Mouse"
                },
                {
                    "name": "keyboard",
                    "description": "",
                    "type": "Keyboard"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 183,
            "description": "Set program renderer",
            "itemtype": "method",
            "name": "setRenderer",
            "params": [
                {
                    "name": "renderer",
                    "description": "Three.js renderer to be used by this program",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 193,
            "description": "Enter VR mode",
            "itemtype": "method",
            "name": "displayVR",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 213,
            "description": "Exit VR mode",
            "itemtype": "method",
            "name": "exitVR",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 229,
            "description": "Update program state\nAutomatically called by the runtime handler ( Editor / App )",
            "itemtype": "method",
            "name": "update",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 238,
            "description": "Render program to canvas\nRenderer passed as argument",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "",
                    "type": "Renderer"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 280,
            "description": "Resize program elements\nCalled by the runtime every time the window is resized",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "x",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 302,
            "description": "Change scene during runtime, this method can receive both a scene name or a scene object\nThis method should be used inside of script objects during runtime",
            "itemtype": "method",
            "name": "setScene",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene|String"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 329,
            "description": "Remove scene from program",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 350,
            "description": "Add new scene to this program\nOn the program class only scenes can be added as children",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 371,
            "description": "Clone program, keeping uuids and every identification attribute\nClone method uses the ObjectLoader to serialise and create a new program instance with the same data",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Cloned program",
                "type": "Program"
            },
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 382,
            "description": "Set a scene as initial scene using its uuid\nThis method is used by the editor",
            "itemtype": "method",
            "name": "setInitialScene",
            "params": [
                {
                    "name": "uuid",
                    "description": "Scene UUID",
                    "type": "String"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 393,
            "description": "Create a scene using a defaul template\nThis is the scene used when creating a new program os scene inside the editor",
            "itemtype": "method",
            "name": "addDefaultScene",
            "params": [
                {
                    "name": "material",
                    "description": "Default material used by objects, if empty a new material is created",
                    "type": "Material"
                }
            ],
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 438,
            "description": "Dispose program data to avoid memory leaks\nCalled when exiting the program",
            "itemtype": "method",
            "name": "dispose",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 473,
            "description": "Receive external data and pass it to all script instances and triggers the onAppData event on every block",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "receiveDataApp",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 505,
            "description": "Send data to external app instances",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "sendDataApp",
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Program.js",
            "line": 526,
            "description": "Serialise object as JSON",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "exportResources",
                    "description": "If true, all resources in the program are exported, otherwise,  only resources attached to objects are exported",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Scene",
            "module": "Sprite"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 18,
            "description": "Cannon.js world used for physics simulation",
            "itemtype": "property",
            "name": "world",
            "type": "World",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 35,
            "description": "Raycaster used for mouse interaction with 3D objects",
            "itemtype": "property",
            "name": "raycaster",
            "type": "Raycaster",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 44,
            "description": "Program that parents this scene",
            "itemtype": "property",
            "name": "program",
            "type": "Program",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 50,
            "description": "Canvas used to draw this scene",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOM",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 56,
            "description": "Normalised mouse coordinates used by the raycaster",
            "itemtype": "property",
            "name": "mouse",
            "type": "Vector2",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 70,
            "description": "Initialise scene objects\nAutomatically called by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "initialize",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 91,
            "description": "Update scene\nCalled automatically by the runtime handler (Editor / App)",
            "itemtype": "method",
            "name": "update",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 118,
            "description": "Get camera from scene using cameras uuid",
            "itemtype": "method",
            "name": "getCamera",
            "params": [
                {
                    "name": "uuid",
                    "description": "UUID of the camera",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Camera if found, otherwise null",
                "type": "Camera"
            },
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 150,
            "description": "Adds camera to active cameras list",
            "itemtype": "method",
            "name": "addCamera",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 160,
            "description": "Update active cameras order",
            "itemtype": "method",
            "name": "updateCameraOrder",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 170,
            "description": "Remove camera from active cameras list",
            "params": [
                {
                    "name": "camera",
                    "description": "Camera to be removed",
                    "type": "Camera"
                }
            ],
            "itemtype": "method",
            "name": "removeCamera",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 183,
            "description": "Set fog mode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setFogMode",
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Objects/Scene.js",
            "line": 201,
            "description": "Serialise the object as JSON\nAlso serialises physics world information",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "Scene",
            "module": "Core"
        },
        {
            "file": "../Source/Runtime/Resources/Audio.js",
            "line": 29,
            "description": "Sets the path of the resource",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Audio.js",
            "line": 40,
            "description": "Serialise audio data as JSON, audio data is serialised in Base64",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Audio",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Folder.js",
            "line": 18,
            "description": "Sets the path of the folder (the one in which the folder will be stored)",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setPath",
            "class": "Folder",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Folder.js",
            "line": 29,
            "description": "Serialise folder as JSON",
            "return": {
                "description": "data",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toJSON",
            "class": "Folder",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Font.js",
            "line": 52,
            "description": "Sets the path of the font",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setPath",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Font.js",
            "line": 86,
            "description": "Generate font shapes used to create 3D geometries",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "divisions",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "paths",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "generateShapes",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Font.js",
            "line": 240,
            "description": "Serialise resource to JSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toJSON",
            "class": "Font",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Resource.js",
            "line": 11,
            "description": "Resource name. Not required to be unique",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Resource.js",
            "line": 18,
            "description": "Universal Unique identifier",
            "itemtype": "property",
            "name": "uuid",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Resource.js",
            "line": 25,
            "description": "Resource type. Used to identify the type of the resource, useful for serialisation",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Resource.js",
            "line": 32,
            "description": "Data format (Base64, ArrayBuffer, ...)\nIndicates in which format the data is being stored",
            "itemtype": "property",
            "name": "format",
            "type": "{String}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Resource.js",
            "line": 40,
            "description": "Data encoding (MP3, JPEG, MP4, ...)\nIndicated how the data is encoded",
            "itemtype": "property",
            "name": "encoding",
            "type": "{String, ArrayBuffer, ...}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Resource.js",
            "line": 48,
            "description": "Data",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Resource.js",
            "line": 56,
            "description": "Serialise resource to JSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toJSON",
            "class": "Resource",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 20,
            "description": "Materials",
            "itemtype": "property",
            "name": "materials",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 27,
            "description": "Textures",
            "itemtype": "property",
            "name": "textures",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 34,
            "description": "Geometries",
            "itemtype": "property",
            "name": "geometries",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 41,
            "description": "Asset objects",
            "itemtype": "property",
            "name": "assetObjects",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 48,
            "description": "Folders",
            "itemtype": "property",
            "name": "folders",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 55,
            "description": "Images",
            "itemtype": "property",
            "name": "images",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 62,
            "description": "Videos",
            "itemtype": "property",
            "name": "videos",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 69,
            "description": "Audio",
            "itemtype": "property",
            "name": "audio",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 76,
            "description": "Fonts",
            "itemtype": "property",
            "name": "fonts",
            "type": "{Array}",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 84,
            "description": "Get material by its name",
            "itemtype": "method",
            "name": "getMaterialByName",
            "params": [
                {
                    "name": "name",
                    "description": "Material name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Material if found, otherwise null",
                "type": "Material"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 100,
            "description": "Add material to materials list",
            "itemtype": "method",
            "name": "addMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "Material to be added",
                    "type": "Material"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 113,
            "description": "Remove material from materials list, also receives default material used to replace",
            "itemtype": "method",
            "name": "removeMaterial",
            "params": [
                {
                    "name": "material",
                    "description": "Material to be removed from manager",
                    "type": "Material"
                },
                {
                    "name": "defaultMaterial",
                    "description": "Default mesh material to replace objects with mesh materials",
                    "type": "Material"
                },
                {
                    "name": "defaultMaterialSprite",
                    "description": "Default sprite material",
                    "type": "Material"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 148,
            "description": "Add a texture to texture list",
            "itemtype": "method",
            "name": "addTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 158,
            "description": "Get texture by name",
            "itemtype": "method",
            "name": "getTextureByName",
            "params": [
                {
                    "name": "name",
                    "description": "Texture name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "texture",
                "type": "Texture"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 174,
            "description": "Remove texture from textures list (also receives default used to replace)",
            "itemtype": "method",
            "name": "removeTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                },
                {
                    "name": "defaultTexture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "return": {
                "description": "Texture if found, otherwise null",
                "type": "Texture"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 230,
            "description": "Get font by name",
            "itemtype": "method",
            "name": "getFontByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Font if found, otherwise null",
                "type": "Font"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 246,
            "description": "Add font to fonts list",
            "itemtype": "method",
            "name": "addFont",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "Font"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 257,
            "description": "Remove font from font list",
            "itemtype": "method",
            "name": "removeFont",
            "params": [
                {
                    "name": "font",
                    "description": "",
                    "type": "Font"
                },
                {
                    "name": "defaultFont",
                    "description": "",
                    "type": "Font"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 279,
            "description": "Get audio by name",
            "itemtype": "method",
            "name": "getAudioByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Audio if found, otherwise null",
                "type": "Audio"
            },
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 295,
            "description": "Add audio to audio list",
            "params": [
                {
                    "name": "audio",
                    "description": "",
                    "type": "Audio"
                }
            ],
            "itemtype": "method",
            "name": "addAudio",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 306,
            "description": "Remove audio",
            "params": [
                {
                    "name": "audio",
                    "description": "",
                    "type": "Audio"
                },
                {
                    "name": "defaultAudio",
                    "description": "",
                    "type": "Audio"
                }
            ],
            "itemtype": "method",
            "name": "removeAudio",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 328,
            "description": "Add an object to object list",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "addObject",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 337,
            "description": "Get an object by name",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getAssetObjectByname",
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 352,
            "description": "Remove an asset object",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 363,
            "description": "Add folder",
            "itemtype": "method",
            "name": "addFolder",
            "params": [
                {
                    "name": "folder",
                    "description": "",
                    "type": "Folder"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/ResourceManager.js",
            "line": 374,
            "description": "Remove folder",
            "itemtype": "method",
            "name": "removeFolder",
            "params": [
                {
                    "name": "folder",
                    "description": "",
                    "type": "Folder"
                }
            ],
            "class": "ResourceManager",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Video.js",
            "line": 29,
            "description": "Sets the video path",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setPath",
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/Resources/Video.js",
            "line": 40,
            "description": "Serialise resource to JSON\nVideo is stored in Base64",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toJSON",
            "class": "Video",
            "module": "Resources"
        },
        {
            "file": "../Source/Runtime/THREE/Fog.js",
            "line": 10,
            "description": "No fong",
            "itemtype": "attribute",
            "name": "NONE",
            "type": "{Number}",
            "class": "THREE.Fog",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Fog.js",
            "line": 17,
            "description": "Linear fog",
            "itemtype": "attribute",
            "name": "LINEAR",
            "type": "{Number}",
            "class": "THREE.Fog",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Fog.js",
            "line": 24,
            "description": "Exponential fog",
            "itemtype": "attribute",
            "name": "EXPONENTIAL",
            "type": "{Number}",
            "class": "THREE.Fog",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Material.js",
            "line": 10,
            "description": "The materials nodes",
            "itemtype": "property",
            "name": "nodes",
            "type": "{Object}",
            "class": "Material",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Material.js",
            "line": 17,
            "description": "The material path",
            "itemtype": "property",
            "name": "path",
            "type": "{String}",
            "class": "Material",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Material.js",
            "line": 24,
            "description": "Dispose material",
            "itemtype": "method",
            "name": "dispose",
            "class": "Material",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/MultiMaterial.js",
            "line": 11,
            "description": "Resource name. Not required to be unique",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "MultiMaterial",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/MultiMaterial.js",
            "line": 18,
            "description": "Dispose materials inside the container",
            "itemtype": "method",
            "name": "dispose",
            "class": "MultiMaterial",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 14,
            "description": "Array with the object's children",
            "itemtype": "property",
            "name": "children",
            "type": "{Array}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 20,
            "description": "When this is set to true, it checks every frame if the object is in the frustum of the camera before rendering the object. Otherwise the object gets rendered every frame even if it isn't visible",
            "itemtype": "property",
            "name": "frustumCulled",
            "default": "true",
            "type": "{Boolean}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 27,
            "description": "The layer membership of the object. The object is only visible if it has at least one layer in common with the Camera in use",
            "itemtype": "property",
            "name": "layers",
            "type": "{Layers}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 33,
            "description": "The local transform matrix",
            "itemtype": "property",
            "name": "matrix",
            "type": "{Matrix}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 39,
            "description": "When this is set to true, it calculates the matrix of position (rotation or quaternion) and scale every frame and also recalculates the matrixWorld property",
            "itemtype": "property",
            "name": "matrixAutoUpdate",
            "default": "true",
            "type": "{Boolean}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 46,
            "description": "The global transform of the object. If the Object3D has no parent, then it's identical to the local transform",
            "itemtype": "property",
            "name": "matrixWorld",
            "type": "{Matrix4}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 52,
            "description": "Name of the object (doesn't need to be unique)",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 58,
            "description": "The object's local position",
            "itemtype": "property",
            "name": "position",
            "type": "{Vector3}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 64,
            "description": "Object's local rotation as a Quaternion",
            "itemtype": "property",
            "name": "quaternion",
            "type": "{Quaternion}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 70,
            "description": "Object's local rotation (see Euler angles), in radians",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Euler}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 76,
            "description": "The object's local scale",
            "itemtype": "property",
            "name": "scale",
            "type": "{Vector3}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 82,
            "description": "This is used by the lookAt method, for example, to determine the orientation of the result",
            "itemtype": "property",
            "name": "up",
            "type": "{Vector3}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 88,
            "description": "UUID of this object instance. It gets automatically assigned, so it shouldn't be edited",
            "itemtype": "property",
            "name": "uuid",
            "type": "{String}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 94,
            "description": "Object gets rendered if true",
            "itemtype": "property",
            "name": "visible",
            "type": "{Boolean}",
            "default": "true",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 101,
            "description": "This value allows the default rendering order of scene graphs objects to be overriden although opaque and transparent objects remain sorted independently",
            "itemtype": "property",
            "name": "renderOrder",
            "default": "0",
            "type": "{Number}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 108,
            "description": "Whether the object gets rendererd into shadow map",
            "itemtype": "property",
            "name": "castShadow",
            "default": "false",
            "type": "{Boolean}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 115,
            "description": "Whether the material receives shadows",
            "itemtype": "property",
            "name": "receiveShadow",
            "default": "false",
            "type": "{Boolean}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 122,
            "description": "Space reserved for user data, can be used for variables in runtime or can be used by scripts to store values on an object",
            "itemtype": "property",
            "name": "userData",
            "type": "{Object}",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 143,
            "description": "Initialise the object",
            "itemtype": "method",
            "name": "initialize",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 155,
            "description": "Update the object state",
            "itemtype": "method",
            "name": "update",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 167,
            "description": "Dispose the object (to avoid memory leaks)",
            "itemtype": "method",
            "name": "dispose",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 179,
            "description": "Remove all children from the object",
            "itemtype": "method",
            "name": "removeAll",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 191,
            "description": "Destroy object, dispose and remove from its parent",
            "itemtype": "method",
            "name": "destroy",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 211,
            "description": "Serialise object as JSON",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "resourceAccess",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "recursive",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 344,
            "description": "Remove children from this object",
            "params": [
                {
                    "name": "objects",
                    "description": "Removes object as child of this object. An arbitrary number of objects may be removed",
                    "type": "Object3D"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 350,
            "description": "Converts the vector from local space to world space",
            "params": [
                {
                    "name": "vector",
                    "description": "Vector representing a position in local (object) space",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "localToWorld",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 356,
            "description": "Updates the vector world from world space to local space",
            "params": [
                {
                    "name": "vector",
                    "description": "A world vector",
                    "type": "Vector3"
                }
            ],
            "itemtype": "method",
            "name": "worldToLocal",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 362,
            "description": "Adds object as child of this object. An arbitrary number of objects may be added",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "objects",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 368,
            "description": "This updates the position, rotation and scale with the matrix",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix4"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 374,
            "description": "Returns a clone ot his object - and optionally - its descendants",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, descendants of the object are also cloned. Default is true",
                    "type": "Boolean"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 380,
            "description": "Copy the given object into this object",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "recursive",
                    "description": "If true, descendants of the object are also copied. Default is true",
                    "type": "Boolean"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 387,
            "description": "Searches through the object's children and returns the first with a matchin name",
            "params": [
                {
                    "name": "name",
                    "description": "String to match the children's Object3D.name property",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getObjectByName",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 393,
            "description": "Searches through the object's children and returns the first with a property that matches the aclue given",
            "params": [
                {
                    "name": "name",
                    "description": "The property name to search for",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value of the given property",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "getObjectByProperty",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 400,
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "Target to set the result. Otherwise, a new Vector3 is instantiated.",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "Returns a vector representing the position of the object in world space.",
                "type": "Vector3"
            },
            "itemtype": "method",
            "name": "getWorldPosition",
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 406,
            "description": "Returns a quaternion representing the rotation of the object in world space.",
            "itemtype": "method",
            "name": "getWorldQuaternion",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Quaternion, otherwise a new Quaternion will be created.",
                    "type": "Quaternion"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 412,
            "description": "Returns the euler angles representing the rotation of the object in world space.",
            "itemtype": "method",
            "name": "getWorldRotation",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Euler, otherwise a new Euler will be created.",
                    "type": "Euler"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 418,
            "description": "Returns a vector of the scaling factors applied to the object for each axis in world space.",
            "itemtype": "method",
            "name": "getWorldScale",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Vector3, otherwise a new Vector3 will be created.",
                    "type": "Vector3"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 424,
            "description": "Returns a vector representing the direction of object's positive z-axis in world space.",
            "itemtype": "method",
            "name": "getWorldDirection",
            "params": [
                {
                    "name": "optionalTarget",
                    "description": "If specified, the result will be copied into this Vector3, otherwise a new Vector3 will be created.",
                    "type": "Vector3"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 430,
            "description": "Rotate an object along an axis in object space. The axis is assumed to be normalized..",
            "itemtype": "method",
            "name": "rotateOnAxis",
            "params": [
                {
                    "name": "axis",
                    "description": "A normalized vector in object space.",
                    "type": "Vector3"
                },
                {
                    "name": "angle",
                    "description": "The angle in radians.",
                    "type": "Number"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 437,
            "description": "Rotates the object around x axis in local space.",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 443,
            "description": "Rotates the object around y axis in local space.",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/THREE/Object3D.js",
            "line": 449,
            "description": "Rotates the object around z axis in local space.",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "rad",
                    "description": "The angle to rotate in radians.",
                    "type": "Number"
                }
            ],
            "class": "THREE.Object3D",
            "module": "THREE"
        },
        {
            "file": "../Source/Runtime/Texture/CanvasTexture.js",
            "line": 33,
            "description": "Image is used to store a DOM canvas element",
            "itemtype": "property",
            "name": "image",
            "type": "{DOM}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/CanvasTexture.js",
            "line": 39,
            "description": "Canvas width",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/CanvasTexture.js",
            "line": 46,
            "description": "Canvas height",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/CanvasTexture.js",
            "line": 53,
            "description": "Canvas context 2D, can be used to draw content to the canvas texture",
            "itemtype": "property",
            "name": "context",
            "type": "{Context2D}",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/CanvasTexture.js",
            "line": 69,
            "description": "Sets the path of this texture",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setPath",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/CanvasTexture.js",
            "line": 80,
            "description": "Update nodes",
            "params": [
                {
                    "name": "nodes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "updateNodes",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/CanvasTexture.js",
            "line": 90,
            "description": "Create JSON description for canvas texture, canvas image is not serialised",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toJSON",
            "class": "CanvasTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/Texture.js",
            "line": 64,
            "description": "Sets the texture path",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setPath",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/Texture.js",
            "line": 75,
            "description": "Update nodes",
            "params": [
                {
                    "name": "nodes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "updateNodes",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/Texture.js",
            "line": 85,
            "description": "Dispose texture",
            "itemtype": "method",
            "name": "dispose",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/Texture.js",
            "line": 95,
            "description": "Create JSON description for texture, serialises image used in the texture",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toJSON",
            "class": "Texture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 38,
            "description": "If autoplay, starts automatically",
            "itemtype": "property",
            "name": "autoplay",
            "default": "true",
            "type": "{Boolean}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 46,
            "description": "If true, the video plays in loop",
            "itemtype": "property",
            "name": "loop",
            "default": "true",
            "type": "{Boolean}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 54,
            "description": "Playback speed",
            "itemtype": "property",
            "name": "playbackRate",
            "default": "1.0",
            "type": "{Number}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 62,
            "description": "Video audio volume",
            "itemtype": "property",
            "name": "volume",
            "default": "1.0",
            "type": "{Number}",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 95,
            "description": "Set video time in seconds",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setTime",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 104,
            "description": "Set loop mode",
            "params": [
                {
                    "name": "loop",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setLoop",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 114,
            "description": "Set video volume",
            "params": [
                {
                    "name": "volume",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setVolume",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 124,
            "description": "Set video speed",
            "itemtype": "method",
            "name": "setPlaybackRate",
            "params": [
                {
                    "name": "playbackRate",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 134,
            "description": "Pause video playback",
            "itemtype": "method",
            "name": "pause",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 144,
            "description": "Start playing video",
            "itemtype": "method",
            "name": "play",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 154,
            "description": "Set video path",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setPath",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 165,
            "description": "Update nodes",
            "params": [
                {
                    "name": "nods",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "updateNodes",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 175,
            "description": "Dispose video texture",
            "itemtype": "method",
            "name": "dispose",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/VideoTexture.js",
            "line": 191,
            "description": "Create video texture json description",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toJSON",
            "class": "VideoTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/WebcamTexture.js",
            "line": 73,
            "description": "Set path",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setPath",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/WebcamTexture.js",
            "line": 84,
            "description": "Update nodes",
            "params": [
                {
                    "name": "nodes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "updateNodes",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/WebcamTexture.js",
            "line": 94,
            "description": "Dispose webcam texture",
            "itemtype": "method",
            "name": "dispose",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Texture/WebcamTexture.js",
            "line": 107,
            "description": "Create JSON description",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toJSON",
            "class": "WebcamTexture",
            "module": "Textures"
        },
        {
            "file": "../Source/Runtime/Utils/ArraybufferUtils.js",
            "line": 12,
            "description": "Create arraybuffer from binary string",
            "itemtype": "method",
            "name": "fromBinaryString",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "ArrayBuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryData"
        },
        {
            "file": "../Source/Runtime/Utils/ArraybufferUtils.js",
            "line": 31,
            "description": "Create arraybuffer from base64 string",
            "itemtype": "method",
            "name": "fromBase64",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "ArrayBuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryData"
        },
        {
            "file": "../Source/Runtime/Utils/ArraybufferUtils.js",
            "line": 66,
            "description": "Create ArrayBuffer from NodeJS buffer",
            "itemtype": "method",
            "name": "fromBuffer",
            "params": [
                {
                    "name": "buffer",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "return": {
                "description": "data",
                "type": "ArrayBuffer"
            },
            "class": "ArraybufferUtils",
            "module": "BinaryData"
        },
        {
            "file": "../Source/Runtime/Utils/Base64Utils.js",
            "line": 12,
            "description": "Remove base64 header from data\nUseful for removing the header from image, audio, video, etc",
            "itemtype": "method",
            "name": "removeHeader",
            "params": [
                {
                    "name": "base64",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryData"
        },
        {
            "file": "../Source/Runtime/Utils/Base64Utils.js",
            "line": 24,
            "description": "Create Base64 string from arraybuffer",
            "itemtype": "method",
            "name": "fromArrayBuffer",
            "params": [
                {
                    "name": "arraybuffer",
                    "description": "",
                    "type": "ArrayBuffer"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryData"
        },
        {
            "file": "../Source/Runtime/Utils/Base64Utils.js",
            "line": 79,
            "description": "Create Base64 string from binary string",
            "itemtype": "method",
            "name": "fromBinaryString",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64",
                "type": "String"
            },
            "class": "Base64Utils",
            "module": "BinaryData"
        },
        {
            "file": "../Source/Runtime/Utils/BufferUtils.js",
            "line": 12,
            "description": "Create nodejs buffer from arraybuffer",
            "itemtype": "method",
            "name": "fromArrayBuffer",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "ArrayBuffer"
                }
            ],
            "return": {
                "description": "buffer",
                "type": "Buffer"
            },
            "class": "BufferUtils",
            "module": "BinaryData"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 16,
            "description": "Type is used to indentify the type of cannonjs\n - BOX\n - CYLINDER\n - SPHERE\n - HULL",
            "itemtype": "attribute",
            "name": "Type",
            "type": "{Object}",
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 34,
            "description": "Given a Object3D instance, creates a corresponding CANNON shape",
            "itemtype": "method",
            "name": "createShape",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "type",
                    "description": "Mesh2shape.Type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Shape"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 106,
            "description": "Create box shape from geometry",
            "itemtype": "method",
            "name": "createBoxShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 129,
            "description": "Bounding box needs to be computed with the entire mesh, not just geometry",
            "itemtype": "method",
            "name": "createBoundingBoxShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 164,
            "description": "Computes 3D convex hull as a CANNON.ConvexPolyhedron",
            "itemtype": "method",
            "name": "createConvexPolyhedron",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "ConvexPolyhedron"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Shape"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 215,
            "description": "Create cylinder shape from geometry",
            "itemtype": "method",
            "name": "createCylinderShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Cylinder"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 255,
            "description": "Plane shape from geometry",
            "itemtype": "method",
            "name": "createPlaneShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Box"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 270,
            "description": "Sphere shape from geometry",
            "itemtype": "method",
            "name": "createSphereShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Sphere"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 283,
            "description": "Sphere shape from bouding sphere",
            "itemtype": "method",
            "name": "createBoundingSphereShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Sphere"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 297,
            "description": "Sphere shape from bouding sphere",
            "itemtype": "method",
            "name": "createTubeShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Trimesh"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 311,
            "description": "Trimesh shape from geometry",
            "itemtype": "method",
            "name": "createTrimeshShape",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "shape",
                "type": "CANNON.Trimesh"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 331,
            "description": "Returns a single geometry for the given object\nIf the object is compound, its geometries are automatically merged",
            "itemtype": "method",
            "name": "getGeometry",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "Geometry that contains all merger geometry",
                "type": "Geometry"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 390,
            "description": "Get geometry vertices",
            "itemtype": "method",
            "name": "getVertices",
            "params": [
                {
                    "name": "geometry",
                    "description": "",
                    "type": "Geometry"
                }
            ],
            "return": {
                "description": "array",
                "type": "Array"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/Mesh2Shape.js",
            "line": 406,
            "description": "Returns a array of THREE.Mesh instances from the given object.\nIf nested transformations are found, they are applied to child meshes as mesh.userData.matrix, so that each mesh has its position/rotation/scale independently of all of its parents except the top-level object.",
            "itemtype": "method",
            "name": "getMeshes",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "meshes found inside the Object3D",
                "type": "Array"
            },
            "class": "Mesh2shape",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 11,
            "description": "Gets all fonts in an object and its children",
            "itemtype": "method",
            "name": "getFonts",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "fonts",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "font array",
                "type": "Array"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 35,
            "description": "Get all audio files in objects and children",
            "itemtype": "method",
            "name": "getAudio",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "audio",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "audio",
                "type": "Array"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 59,
            "description": "Get all materials in an object and its children",
            "itemtype": "method",
            "name": "getMaterials",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "materials",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "materials",
                "type": "Array"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 110,
            "description": "Gets all textures in an object and its children",
            "itemtype": "method",
            "name": "getTextures",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "textures",
                    "description": "Textures array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "files",
                "type": "Array"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 171,
            "description": "Get object scene",
            "itemtype": "method",
            "name": "getScene",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "scene",
                "type": "Object3D"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 194,
            "description": "Get object tree root",
            "itemtype": "method",
            "name": "getRoot",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "root",
                "type": "Object3D"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 213,
            "description": "Set object and all its children matrixAutoUpdate value",
            "itemtype": "method",
            "name": "setMatrixAutoUpdate",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 229,
            "description": "Set an object and its children to receive shadows",
            "itemtype": "method",
            "name": "setShadowReceiving",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 245,
            "description": "Set object and all children to cast shadows",
            "itemtype": "method",
            "name": "setShadowCasting",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Utils/ObjectUtils.js",
            "line": 261,
            "description": "Check if an object is the child of another one",
            "itemtype": "method",
            "name": "isChildOf",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "Object3D"
                },
                {
                    "name": "child",
                    "description": "",
                    "type": "Object3D"
                }
            ],
            "return": {
                "description": "True if parent is parent of child",
                "type": "Boolean"
            },
            "class": "ObjectUtils",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 13,
            "description": "Opens and reads a text file",
            "itemtype": "method",
            "name": "readFile",
            "params": [
                {
                    "name": "fname",
                    "description": "The path of the file to open",
                    "type": "String"
                },
                {
                    "name": "sync",
                    "description": "If true, the file is read in an asynchronous way",
                    "type": "Boolean"
                },
                {
                    "name": "onLoad",
                    "description": "called when the file is done loading",
                    "type": "Function"
                },
                {
                    "name": "onProgress",
                    "description": "called when there is a progress while reading the file",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the content of the file",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 70,
            "description": "Read a file as an array buffer",
            "itemtype": "method",
            "name": "readFileArrayBuffer",
            "params": [
                {
                    "name": "fname",
                    "description": "The path to the file to open",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the file data",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 98,
            "description": "Read a file as base64",
            "itemtype": "method",
            "name": "readFileBase64",
            "params": [
                {
                    "name": "fname",
                    "description": "The path to the file to open",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the file data",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 118,
            "description": "Write a text file",
            "itemtype": "method",
            "name": "writeFile",
            "params": [
                {
                    "name": "fname",
                    "description": "The path to the file to write",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data to write in the file",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 132,
            "description": "Write a binary file from base64 data",
            "itemtype": "method",
            "name": "writeFileBase64",
            "params": [
                {
                    "name": "fname",
                    "description": "The path to the file to write",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data to write in the file",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 148,
            "description": "Copies a file (this function can't be used to copy folders)",
            "itemtype": "method",
            "name": "copyFile",
            "params": [
                {
                    "name": "src",
                    "description": "The source file to copy",
                    "type": "String"
                },
                {
                    "name": "dest",
                    "description": "The destination/path to the new file",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 160,
            "description": "Creates a directory (doesn't throw exception if directory already exists)",
            "itemtype": "method",
            "name": "makeDirectory",
            "params": [
                {
                    "name": "dir",
                    "description": "The path to create the directory",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 173,
            "description": "Returns the files in a directory (returns empty array if something went wrong)",
            "itemtype": "method",
            "name": "getFilesDirectory",
            "params": [
                {
                    "name": "dir",
                    "description": "Path to the directory",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array with the files in the entered directory (if there was any error, the returned array is \"[]\")",
                "type": "Array"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 190,
            "description": "Copies a folder and all of its files (including symbolic links)",
            "itemtype": "method",
            "name": "copyFolder",
            "params": [
                {
                    "name": "src",
                    "description": "The source folder",
                    "type": "String"
                },
                {
                    "name": "dest",
                    "description": "The destination where to copy the folder",
                    "type": "String"
                }
            ],
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 222,
            "description": "Opens a chooser file dialog",
            "itemtype": "method",
            "name": "chooseFile",
            "params": [
                {
                    "name": "onLoad",
                    "description": "onLoad callback",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "Filters files which can and can't be selected (for example \"images/*\")",
                    "type": "String"
                },
                {
                    "name": "saveas",
                    "description": "If true, by using that dialog the files won't be opened but saved",
                    "type": "Boolean"
                }
            ],
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 250,
            "description": "Checks if a file currently exists",
            "itemtype": "method",
            "name": "fileExists",
            "params": [
                {
                    "name": "file",
                    "description": "The path to the file to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns whether the file exists or not",
                "type": "Boolean"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 264,
            "description": "Gets the file name from path (always in lowercase)",
            "itemtype": "method",
            "name": "getFileName",
            "params": [
                {
                    "name": "file",
                    "description": "The file path to get the name from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The name of the file (in lowercase)",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 274,
            "description": "Gets the file name without extension",
            "itemtype": "method",
            "name": "getNameWithoutExtension",
            "params": [
                {
                    "name": "file",
                    "description": "Path of the file to get the name from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The name of the file without its extension",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 284,
            "description": "Get the directory of a file",
            "itemtype": "method",
            "name": "getFilePath",
            "params": [
                {
                    "name": "file",
                    "description": "The path of the file to get the directory from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The directory of the file from the entered path",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/FileSystem.js",
            "line": 294,
            "description": "Get the extension of a file by using a path string",
            "itemtype": "method",
            "name": "getFileExtension",
            "params": [
                {
                    "name": "file",
                    "description": "The path to get the extension from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The extension of the file from the entered path",
                "type": "String"
            },
            "class": "FileSystem",
            "module": "Physics"
        },
        {
            "file": "../Source/Runtime/Gorlot.js",
            "line": 10,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "{String}",
            "default": "\"Gorlot\"",
            "class": "GORLOT",
            "module": "Runtime"
        },
        {
            "file": "../Source/Runtime/Gorlot.js",
            "line": 17,
            "description": "Stores the gorlot runtime version",
            "itemtype": "attribute",
            "name": "VERSION",
            "type": "{String}",
            "class": "GORLOT",
            "module": "Runtime"
        },
        {
            "file": "../Source/Runtime/Gorlot.js",
            "line": 24,
            "description": "Shows the GORLOT runtime timestamp",
            "itemtype": "attribute",
            "name": "TIMESTAMP",
            "type": "{String}",
            "class": "GORLOT",
            "module": "Runtime"
        },
        {
            "file": "../Source/Runtime/Gorlot.js",
            "line": 31,
            "description": "Check if host has WebVR available",
            "itemtype": "method",
            "name": "WebVRAvailable",
            "return": {
                "description": "Returns true if available",
                "type": "Boolean"
            },
            "class": "GORLOT",
            "module": "Runtime"
        }
    ],
    "warnings": []
}